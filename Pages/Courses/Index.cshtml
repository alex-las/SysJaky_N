@page
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model SysJaky_N.Pages.Courses.IndexModel
@{
    ViewData["Title"] = Localizer["Title"];
}

<h1 class="mb-3">@Localizer["Title"]</h1>

<ul class="nav nav-pills mb-3">
    <li class="nav-item"><a class="nav-link active" asp-page="/Courses/Index">@Localizer["TabList"]</a></li>
    <li class="nav-item"><a class="nav-link" asp-page="/Courses/Calendar">@Localizer["TabCalendar"]</a></li>
</ul>

<div class="result-header sticky-top z-2 d-flex flex-wrap align-items-center justify-content-between gap-2 mb-3 py-2 bg-body border-bottom">
    <div class="small text-muted">
        @Localizer["ResultCount", Model.TotalCount]
        @if (!string.IsNullOrWhiteSpace(HttpContext.Request.Query["persona"]))
        {
            <span class="ms-2 badge bg-primary-subtle text-primary">@(HttpContext.Request.Query["persona"])</span>
        }
        @if (!string.IsNullOrWhiteSpace(HttpContext.Request.Query["goal"]))
        {
            <span class="ms-1 badge bg-warning">@((string)HttpContext.Request.Query["goal"])</span>
        }
    </div>
    <div class="d-flex gap-2">
        <a class="btn btn-sm btn-outline-secondary" href="@Url.Page("/Courses/Index")">@Localizer["ResetFilters"]</a>
        <a class="btn btn-sm btn-outline-primary d-lg-none" data-bs-toggle="offcanvas" href="#filters"><i class="bi bi-sliders"></i> @Localizer["FiltersButton"]</a>
    </div>
</div>

<div id="cmpBar" class="compare-bar d-none" data-count-format="@Localizer["CompareBarCountFormat"].Value" data-cta-text="@Localizer["CompareBarCta"].Value">
    <div class="container-xl d-flex justify-content-between align-items-center">
        <div class="small" id="cmpCount">@Localizer["CompareBarCountFormat", 0]</div>
        <a id="cmpGo" class="btn btn-primary btn-sm disabled" aria-disabled="true">@Localizer["CompareBarCta"]</a>
    </div>
</div>
<script>
    const bar = document.getElementById('cmpBar');
    const btn = document.getElementById('cmpGo');
    const cnt = document.getElementById('cmpCount');

    if (bar && btn && cnt) {
        const countFormat = bar.dataset.countFormat ?? '{0}';
        const ctaText = bar.dataset.ctaText ?? btn.textContent ?? '';
        const sel = new Set();

        if (ctaText) {
            btn.textContent = ctaText;
        }

        const updateCountText = (value) => {
            cnt.textContent = countFormat.replace('{0}', value.toString());
        };

        updateCountText(0);

        document.querySelectorAll('.cmp-check').forEach(ch => {
            ch.addEventListener('change', () => {
                if (ch.checked) {
                    sel.add(ch.value);
                } else {
                    sel.delete(ch.value);
                }

                const selected = sel.size;
                updateCountText(selected);

                if (selected > 1 && selected <= 3) {
                    bar.classList.remove('d-none');
                    btn.classList.remove('disabled');
                    btn.removeAttribute('aria-disabled');
                    btn.href = '/Courses/Compare?ids=' + Array.from(sel).join(',');
                } else {
                    btn.classList.add('disabled');
                    btn.setAttribute('aria-disabled', 'true');
                    btn.removeAttribute('href');

                    if (selected === 0) {
                        bar.classList.add('d-none');
                    } else {
                        bar.classList.remove('d-none');
                    }
                }
            });
        });
    }
</script>

@if (TempData["CartError"] is string cartError && !string.IsNullOrWhiteSpace(cartError))
{
    <div class="alert alert-danger" role="alert">@cartError</div>
}

@await Html.PartialAsync("/Pages/Courses/_Filters.cshtml", Model)

<div class="row g-3">
    <aside class="col-lg-3 d-none d-lg-block">
        <div class="feature-card p-3">
            @await Html.PartialAsync("/Pages/Courses/_FiltersForm.cshtml", Model)
        </div>
    </aside>
    <main class="col-lg-9">
        <div class="courses-grid">
            @foreach (var c in Model.Courses)
            {
                @await Html.PartialAsync("/Pages/Shared/Components/_CourseCard.cshtml", c)
            }
        </div>

        @if (Model.TotalPages > 1)
        {
            <nav class="mt-3" aria-label='@Localizer["PaginationLabel"]'>
                <ul class="pagination">
                    <li class="page-item @(Model.PageNumber <= 1 ? "disabled" : "")">
                        <a class="page-link" asp-route-PageNumber="@(Model.PageNumber - 1)" asp-route-CourseGroupId="@Model.CourseGroupId" asp-route-SearchString="@Model.SearchString" asp-route-Level="@Model.Level" asp-route-Mode="@Model.Mode" asp-route-MinDuration="@Model.MinDuration" asp-route-MaxDuration="@Model.MaxDuration" asp-route-SelectedTagIds="@Model.SelectedTagIds">@Localizer["Previous"]</a>
                    </li>
                    <li class="page-item @(Model.PageNumber >= Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" asp-route-PageNumber="@(Model.PageNumber + 1)" asp-route-CourseGroupId="@Model.CourseGroupId" asp-route-SearchString="@Model.SearchString" asp-route-Level="@Model.Level" asp-route-Mode="@Model.Mode" asp-route-MinDuration="@Model.MinDuration" asp-route-MaxDuration="@Model.MaxDuration" asp-route-SelectedTagIds="@Model.SelectedTagIds">@Localizer["Next"]</a>
                    </li>
                </ul>
            </nav>
        }
    </main>
</div>
