@page
@using System.Linq
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc.Localization
@using SysJaky_N.Models
@inject IViewLocalizer Localizer
@model SysJaky_N.Pages.Courses.IndexModel
@{
    ViewData["Title"] = Localizer["Title"];

    var serializerOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web);
    var categoryGroups = Model.CategoryGroups
        ?? Array.Empty<SysJaky_N.Pages.Courses.IndexModel.CourseCategoryGroupViewModel>();

    Func<CourseCardViewModel, object> projectCourse = course => new
    {
        id = course.Id,
        title = course.Title,
        description = course.Description,
        level = course.Level,
        mode = course.Mode,
        dateDisplay = course.DateDisplay,
        priceDisplay = course.PriceDisplay,
        durationDisplay = course.DurationDisplay,
        detailsUrl = course.DetailsUrl,
        addToCartUrl = course.AddToCartUrl,
        wishlistUrl = course.WishlistUrl,
        isoStandard = course.IsoStandard,
        norms = course.Norms,
        cities = course.Cities,
        categories = course.Categories.Select(category => new
        {
            id = category.Id,
            name = category.Name,
            slug = category.Slug
        })
    };

    var categoryItems = categoryGroups
        .Select(group => new
        {
            id = group.Id,
            name = group.Name,
            slug = group.Slug,
            courseCount = group.CourseCount,
            courses = (group.Courses ?? Array.Empty<CourseCardViewModel>())
                .Where(course => course is not null)
                .Select(projectCourse)
        })
        .ToList();

    var categoriesJson = JsonSerializer.Serialize(categoryItems, serializerOptions);
    var formatAllLabelValue = Localizer["FiltersFormatAll"].Value ?? Localizer["FiltersButton"].Value ?? "Všechny formáty";
    var levelAllLabelValue = Localizer["FiltersLevelAll"].Value ?? Localizer["LevelsLabel"].Value ?? "Všechny úrovně";
    var normAllLabelValue = Localizer["FiltersNormAll"].Value ?? Localizer["NormsLabel"].Value ?? "Všechny normy";
    var cityAllLabelValue = Localizer["FiltersCityAll"].Value ?? Localizer["CitiesLabel"].Value ?? "Všechna města";
    var resultCountTemplateValue = Localizer["ResultCount", "{0}"].Value ?? "{0}";
    var detailsLabelValue = Localizer["Details"].Value ?? "Detail";
    var noResultsLabelValue = Localizer["NoCoursesFound"].Value ?? "Žádné kurzy neodpovídají výběru.";
    var wishlistLabelValue = Localizer["WishlistButtonLabel"].Value ?? "Hlídat termín";
    var modeLabelsValue = Enum.GetValues<CourseMode>()
        .ToDictionary(mode => mode.ToString(), mode => Localizer[$"CourseMode_{mode}"].Value ?? mode.ToString());
    var levelLabelsValue = Enum.GetValues<CourseLevel>()
        .ToDictionary(level => level.ToString(), level => Localizer[$"CourseLevel_{level}"].Value ?? level.ToString());
    var labelsJson = JsonSerializer.Serialize(new
    {
        formatAllLabel = formatAllLabelValue,
        levelAllLabel = levelAllLabelValue,
        normAllLabel = normAllLabelValue,
        cityAllLabel = cityAllLabelValue,
        resultCountTemplate = resultCountTemplateValue,
        detailsLabel = detailsLabelValue,
        noResultsLabel = noResultsLabelValue,
        wishlistLabel = wishlistLabelValue,
        modeLabels = modeLabelsValue,
        levelLabels = levelLabelsValue
    }, serializerOptions);
}

<nav aria-label="breadcrumb" class="mb-3">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-page="/Index">@Localizer["BreadcrumbHome"]</a></li>
        <li class="breadcrumb-item active" aria-current="page">@Localizer["BreadcrumbCourses"]</li>
    </ol>
</nav>

<h1 class="mb-3">@Localizer["Title"]</h1>

<ul class="nav nav-pills mb-3">
    <li class="nav-item"><a class="nav-link active" asp-page="/Courses/Index">@Localizer["TabList"]</a></li>
    <li class="nav-item"><a class="nav-link" asp-page="/Courses/Calendar">@Localizer["TabCalendar"]</a></li>
</ul>

@if (TempData["CartError"] is string cartError && !string.IsNullOrWhiteSpace(cartError))
{
    <div class="rounded-2xl border border-red-200 bg-red-50 p-4 text-sm text-red-800" role="alert">@cartError</div>
}

@if (TempData["CartSuccess"] is string cartSuccess && !string.IsNullOrWhiteSpace(cartSuccess))
{
    <div class="rounded-2xl border border-emerald-200 bg-emerald-50 p-4 text-sm text-emerald-800" role="status">@cartSuccess</div>
}

<div class="mx-auto max-w-7xl space-y-6" x-data="courseFilters()">
    <div class="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
        <div class="grid gap-6 lg:grid-cols-12">
            <label class="flex flex-col gap-2 lg:col-span-5">
                <span class="text-sm font-medium text-slate-700">@Localizer["SearchLabel"]</span>
                <div class="relative">
                    <span class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3 text-slate-400">
                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 1 0 0 11 5.5 5.5 0 0 0 0-11ZM2 9a7 7 0 1 1 12.452 4.391l3.328 3.329a.75.75 0 0 1-1.06 1.06l-3.329-3.328A7 7 0 0 1 2 9Z" clip-rule="evenodd" />
                        </svg>
                    </span>
                    <input type="search"
                           x-model="search"
                           placeholder="@Localizer["SearchPlaceholder"]"
                           class="block w-full rounded-xl border border-slate-300 bg-white py-2 pl-10 pr-4 text-sm text-slate-900 outline-none transition focus:border-blue-500 focus:ring-2 focus:ring-blue-200"
                           aria-label="@Localizer["SearchLabel"]" />
                </div>
            </label>
            <div class="grid gap-4 sm:grid-cols-2 lg:col-span-7">
                <label class="flex flex-col gap-2">
                    <span class="text-sm font-medium text-slate-700">@Localizer["NormsLabel"]</span>
                    <select x-model="norm"
                            class="block w-full rounded-xl border border-slate-300 bg-white py-2 pl-3 pr-8 text-sm text-slate-900 outline-none transition focus:border-blue-500 focus:ring-2 focus:ring-blue-200">
                        <template x-for="option in getNormOptions()" :key="option">
                            <option :value="option" x-text="option === 'all' ? normAllLabel : option"></option>
                        </template>
                    </select>
                </label>
                <label class="flex flex-col gap-2">
                    <span class="text-sm font-medium text-slate-700">@Localizer["CitiesLabel"]</span>
                    <select x-model="city"
                            class="block w-full rounded-xl border border-slate-300 bg-white py-2 pl-3 pr-8 text-sm text-slate-900 outline-none transition focus:border-blue-500 focus:ring-2 focus:ring-blue-200">
                        <template x-for="option in getCityOptions()" :key="option">
                            <option :value="option" x-text="option === 'all' ? cityAllLabel : option"></option>
                        </template>
                    </select>
                </label>
            </div>
        </div>
        <div class="mt-6 grid gap-4 lg:grid-cols-2">
            <div class="flex flex-col gap-3">
                <span class="text-sm font-medium text-slate-700">@Localizer["TypesLabel"]</span>
                <div class="flex flex-wrap gap-2">
                    <template x-for="option in getFormats()" :key="option">
                        <button type="button"
                                class="inline-flex items-center gap-2 rounded-full border px-4 py-2 text-sm font-medium transition"
                                @@click="mode = option"
                                :class="mode === option ? 'border-transparent bg-blue-600 text-white shadow-sm' : 'border-slate-300 bg-white text-slate-600 hover:border-blue-400 hover:text-blue-600'">
                            <span x-text="modeLabel(option)"></span>
                        </button>
                    </template>
                </div>
            </div>
            <div class="flex flex-col gap-3">
                <span class="text-sm font-medium text-slate-700">@Localizer["LevelsLabel"]</span>
                <div class="flex flex-wrap gap-2">
                    <template x-for="option in getLevels()" :key="option">
                        <button type="button"
                                class="inline-flex items-center gap-2 rounded-full border px-4 py-2 text-sm font-medium transition"
                                @@click="level = option"
                                :class="level === option ? 'border-transparent bg-slate-900 text-white shadow-sm' : 'border-slate-300 bg-white text-slate-600 hover:border-slate-400 hover:text-slate-900'">
                            <span x-text="levelLabel(option)"></span>
                        </button>
                    </template>
                </div>
            </div>
        </div>
        <div class="mt-6 flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
            <p class="text-sm text-slate-600">
                <span x-text="formatResultCount(totalFilteredCount())"></span>
            </p>
            <div class="flex gap-2">
                <button type="button"
                        class="inline-flex items-center rounded-lg border border-slate-300 px-4 py-2 text-sm font-medium text-slate-600 transition hover:border-slate-400 hover:text-slate-900"
                        @@click="resetFilters()">
                    @Localizer["ResetFilters"]
                </button>
            </div>
        </div>
    </div>

    <div class="rounded-2xl border border-slate-200 bg-white p-6 shadow-sm" x-show="categories.length > 0">
        <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
            <div class="flex flex-col gap-1">
                <span class="text-base font-semibold text-slate-900">@Localizer["CategoriesLabel"]</span>
                <span class="text-sm text-slate-500">@Localizer["CategoryNavigationDescription"]</span>
            </div>
            <div class="flex flex-wrap gap-2" role="tablist" aria-label="@Localizer["CategoryNavigationLabel"]">
                <button type="button"
                        class="inline-flex items-center gap-2 rounded-full border px-4 py-2 text-sm font-medium transition"
                        :class="activeCategory === 'all' ? 'border-transparent bg-slate-900 text-white shadow-sm' : 'border-slate-300 bg-white text-slate-600 hover:border-slate-400 hover:text-slate-900'"
                        @@click="setCategory('all')"
                        role="tab"
                        :aria-selected="activeCategory === 'all'">
                    <span>@Localizer["CategoryAllLabel"]</span>
                    <span class="inline-flex items-center rounded-full bg-slate-100 px-2 py-0.5 text-xs font-semibold text-slate-700"
                          x-text="totalFilteredCount()"></span>
                </button>
                <template x-for="category in categories" :key="category.slug">
                    <button type="button"
                            class="inline-flex items-center gap-2 rounded-full border px-4 py-2 text-sm font-medium transition"
                            :class="activeCategory === category.slug ? 'border-transparent bg-blue-600 text-white shadow-sm' : 'border-slate-300 bg-white text-slate-600 hover:border-blue-400 hover:text-blue-600'"
                            @@click="setCategory(category.slug)"
                            role="tab"
                            :aria-selected="activeCategory === category.slug">
                        <span x-text="category.name"></span>
                        <span class="inline-flex items-center rounded-full bg-slate-100 px-2 py-0.5 text-xs font-semibold text-slate-700"
                              x-text="filteredCountForCategory(category.slug)"></span>
                    </button>
                </template>
            </div>
        </div>
    </div>

    <div class="space-y-6">
        <template x-for="category in getVisibleCategories()" :key="category.slug || category.id">
            <section class="rounded-2xl border border-slate-200 bg-white shadow-sm">
                <header class="flex flex-col gap-3 border-b border-slate-100 p-6 md:flex-row md:items-center md:justify-between">
                    <div class="flex flex-col gap-1">
                        <h2 class="text-lg font-semibold text-slate-900" x-text="category.name"></h2>
                        <p class="text-sm text-slate-500">
                            <span x-text="formatResultCount(category.filteredCourses.length)"></span>
                        </p>
                    </div>
                    <div class="inline-flex items-center gap-2 text-sm text-slate-500">
                        <span>@Localizer["CategoryTotalLabel"]</span>
                        <span class="inline-flex items-center rounded-full bg-slate-100 px-3 py-1 text-xs font-semibold text-slate-700"
                              x-text="category.totalCourses"></span>
                    </div>
                </header>
                <div class="p-6">
                    <div class="grid gap-6 lg:grid-cols-2 xl:grid-cols-3" role="list" x-show="category.filteredCourses.length > 0">
                        <template x-for="course in category.filteredCourses" :key="category.slug + '-' + course.id">
                            <article class="flex h-full flex-col justify-between rounded-2xl border border-slate-200 bg-white p-6 shadow-sm transition hover:-translate-y-0.5 hover:shadow-md" role="listitem">
                                <div class="flex flex-col gap-4">
                                    <div class="flex items-start justify-between gap-3">
                                        <div class="flex flex-col gap-3">
                                            <h3 class="text-lg font-semibold text-slate-900" x-text="course.title"></h3>
                                            <div class="flex flex-wrap gap-2">
                                                <template x-if="course.isoStandard">
                                                    <span class="inline-flex items-center rounded-full bg-blue-100 px-3 py-1 text-xs font-semibold text-blue-700" x-text="course.isoStandard"></span>
                                                </template>
                                                <template x-for="norm in course.extraNorms" :key="norm">
                                                    <span class="inline-flex items-center rounded-full bg-blue-50 px-3 py-1 text-xs font-medium text-blue-700" x-text="norm"></span>
                                                </template>
                                            </div>
                                        </div>
                                        <span class="inline-flex items-center rounded-full bg-blue-100 px-3 py-1 text-xs font-semibold text-blue-700" x-text="modeLabel(course.mode)"></span>
                                    </div>
                                    <p class="text-sm text-slate-600" x-show="course.description" x-text="course.description"></p>
                                    <div class="flex flex-wrap items-center gap-2">
                                        <span class="inline-flex items-center rounded-full bg-slate-100 px-3 py-1 text-xs font-semibold text-slate-700" x-text="levelLabel(course.level)"></span>
                                        <span class="text-sm font-medium text-slate-700" x-text="course.dateDisplay"></span>
                                        <span class="text-sm font-semibold text-blue-600" x-text="course.priceDisplay"></span>
                                    </div>
                                    <div class="flex flex-wrap gap-2" x-show="course.cities && course.cities.length">
                                        <template x-for="cityName in course.cities" :key="cityName">
                                            <span class="inline-flex items-center rounded-full bg-slate-100 px-3 py-1 text-xs font-medium text-slate-600" x-text="cityName"></span>
                                        </template>
                                    </div>
                                </div>
                                <div class="mt-6 flex flex-col gap-4">
                                    <div class="flex items-center justify-between">
                                        <span class="text-sm text-slate-500" x-text="course.durationDisplay"></span>
                                        <a class="inline-flex items-center rounded-lg bg-blue-600 px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-blue-500"
                                           :href="course.detailsUrl"
                                           x-text="detailsLabel"></a>
                                    </div>
                                    <div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                                        <template x-if="course.addToCartUrl">
                                            <form method="post" :action="course.addToCartUrl" class="inline-flex w-full sm:w-auto">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="courseId" :value="course.id" />
                                                <button type="submit"
                                                        class="inline-flex w-full items-center justify-center gap-2 rounded-lg bg-emerald-600 px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-emerald-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-emerald-600">
                                                    <i class="bi bi-cart-plus" aria-hidden="true"></i>
                                                    <span>@Localizer["AddToCartLabel"]</span>
                                                </button>
                                            </form>
                                        </template>
                                        <form method="post" x-show="course.wishlistUrl" :action="course.wishlistUrl" class="inline-flex w-full sm:w-auto">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="inline-flex w-full items-center justify-center gap-2 rounded-lg border border-slate-300 px-4 py-2 text-sm font-medium text-slate-600 transition hover:border-blue-500 hover:text-blue-600">
                                                <i class="bi bi-heart" aria-hidden="true"></i>
                                                <span x-text="wishlistLabel"></span>
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </article>
                        </template>
                    </div>
                    <div class="rounded-2xl border border-dashed border-slate-200 p-6 text-center text-sm text-slate-500"
                         x-show="category.filteredCourses.length === 0"
                         x-text="noResultsLabel"></div>
                </div>
            </section>
        </template>
    </div>

    <div class="rounded-2xl border border-dashed border-slate-300 p-8 text-center text-sm text-slate-500"
         x-show="totalFilteredCount() === 0"
         x-text="noResultsLabel"></div>
</div>

@section Scripts {
    <script>
        // Globální data - s fallbacky pokud nejsou definována
        window.courseCategoryData = @Html.Raw(categoriesJson);
        window.labelsData = @Html.Raw(labelsJson);

        function courseFilters() {
            function toLowerSafe(value) {
                return typeof value === 'string' ? value.toLowerCase() : '';
            }

            function normalizeList(list) {
                if (!Array.isArray(list)) {
                    return [];
                }

                var result = [];
                for (var i = 0; i < list.length; i++) {
                    var item = list[i];
                    if (typeof item !== 'string') {
                        continue;
                    }
                    var trimmed = item.trim();
                    if (trimmed.length === 0) {
                        continue;
                    }
                    if (!result.some(function (existing) { return existing.localeCompare(trimmed, undefined, { sensitivity: 'accent' }) === 0; })) {
                        result.push(trimmed);
                    }
                }
                return result;
            }

            function equalsIgnoreCase(a, b) {
                if (typeof a !== 'string' || typeof b !== 'string') {
                    return false;
                }
                return a.localeCompare(b, undefined, { sensitivity: 'accent' }) === 0;
            }

            var rawCategories = Array.isArray(window.courseCategoryData) ? window.courseCategoryData : [];
            var labels = (typeof window.labelsData === 'object' && window.labelsData !== null) ? window.labelsData : {};

            var normalizedCategories = [];
            var normSet = new Set();
            var citySet = new Set();
            var modeSet = new Set();
            var levelSet = new Set();
            var courseCache = new Map();
            var fallbackIdCounter = 0;

            function normalizeCourse(rawCourse) {
                if (!rawCourse || typeof rawCourse !== 'object') {
                    return null;
                }

                var id = rawCourse.id || rawCourse.Id || '';
                if (!id) {
                    if (rawCourse.detailsUrl || rawCourse.DetailsUrl) {
                        id = rawCourse.detailsUrl || rawCourse.DetailsUrl;
                    } else {
                        id = 'course-' + (fallbackIdCounter++);
                    }
                }

                var title = (rawCourse.title || rawCourse.Title || '').trim();
                if (!title) {
                    title = 'Bez názvu';
                }
                var description = (rawCourse.description || rawCourse.Description || '').trim();
                var level = rawCourse.level || rawCourse.Level || '';
                var mode = rawCourse.mode || rawCourse.Mode || '';
                var detailsUrl = rawCourse.detailsUrl || rawCourse.DetailsUrl || '#';
                var wishlistUrl = rawCourse.wishlistUrl || rawCourse.WishlistUrl || '';
                var isoStandard = (rawCourse.isoStandard || rawCourse.IsoStandard || '').trim();
                var norms = normalizeList(rawCourse.norms || rawCourse.Norms || []);

                if (isoStandard && !norms.some(function (item) { return equalsIgnoreCase(item, isoStandard); })) {
                    norms.push(isoStandard);
                }

                var cities = normalizeList(rawCourse.cities || rawCourse.Cities || []);

                var categoriesRaw = rawCourse.categories || rawCourse.Categories;
                var categories = Array.isArray(categoriesRaw)
                    ? categoriesRaw.filter(function (category) {
                        return category && typeof category === 'object' && (category.name || category.Name);
                    }).map(function (category) {
                        return {
                            id: category.id || category.Id || null,
                            name: (category.name || category.Name || '').trim(),
                            slug: (category.slug || category.Slug || '').trim()
                        };
                    })
                    : [];

                return {
                    id: id,
                    title: title,
                    description: description,
                    level: level,
                    mode: mode,
                    dateDisplay: rawCourse.dateDisplay || rawCourse.DateDisplay || '',
                    priceDisplay: rawCourse.priceDisplay || rawCourse.PriceDisplay || '',
                    durationDisplay: rawCourse.durationDisplay || rawCourse.DurationDisplay || '',
                    detailsUrl: detailsUrl,
                    addToCartUrl: rawCourse.addToCartUrl || rawCourse.AddToCartUrl || '',
                    wishlistUrl: wishlistUrl,
                    isoStandard: isoStandard,
                    norms: norms,
                    extraNorms: isoStandard
                        ? norms.filter(function (norm) { return !equalsIgnoreCase(norm, isoStandard); })
                        : norms.slice(),
                    cities: cities,
                    categories: categories
                };
            }

            for (var categoryIndex = 0; categoryIndex < rawCategories.length; categoryIndex++) {
                var rawCategory = rawCategories[categoryIndex];
                if (!rawCategory || typeof rawCategory !== 'object') {
                    continue;
                }

                var categoryId = rawCategory.id || rawCategory.Id || null;
                var categoryName = (rawCategory.name || rawCategory.Name || '').trim();
                var categorySlug = (rawCategory.slug || rawCategory.Slug || '').trim();
                var courseCount = typeof rawCategory.courseCount === 'number'
                    ? rawCategory.courseCount
                    : (typeof rawCategory.CourseCount === 'number' ? rawCategory.CourseCount : 0);

                var rawCourseList = rawCategory.courses || rawCategory.Courses;
                if (!Array.isArray(rawCourseList)) {
                    rawCourseList = [];
                }

                var normalizedCourseList = [];

                for (var courseIndex = 0; courseIndex < rawCourseList.length; courseIndex++) {
                    var rawCourse = rawCourseList[courseIndex];
                    var normalizedCourse = normalizeCourse(rawCourse);
                    if (!normalizedCourse) {
                        continue;
                    }

                    var cachedCourse = courseCache.get(normalizedCourse.id);
                    if (!cachedCourse) {
                        courseCache.set(normalizedCourse.id, normalizedCourse);
                        normalizedCourse.norms.forEach(function (norm) { normSet.add(norm); });
                        normalizedCourse.cities.forEach(function (city) { citySet.add(city); });
                        if (normalizedCourse.mode) { modeSet.add(normalizedCourse.mode); }
                        if (normalizedCourse.level) { levelSet.add(normalizedCourse.level); }
                        cachedCourse = normalizedCourse;
                    }

                    normalizedCourseList.push(cachedCourse);
                }

                normalizedCategories.push({
                    id: categoryId,
                    name: categoryName || ('Kategorie ' + (categoryIndex + 1)),
                    slug: categorySlug || ('category-' + (categoryIndex + 1)),
                    totalCourses: courseCount || normalizedCourseList.length,
                    courses: normalizedCourseList
                });
            }

            var allCourses = Array.from(courseCache.values());

            var formatAllLabel = labels.formatAllLabel || 'Všechny formáty';
            var levelAllLabel = labels.levelAllLabel || 'Všechny úrovně';
            var normAllLabel = labels.normAllLabel || 'Všechny normy';
            var cityAllLabel = labels.cityAllLabel || 'Všechna města';
            var resultCountTemplate = labels.resultCountTemplate || '{0}';
            var detailsLabel = labels.detailsLabel || 'Detail';
            var noResultsLabel = labels.noResultsLabel || 'Žádné kurzy neodpovídají výběru.';
            var wishlistLabel = labels.wishlistLabel || 'Hlídat termín';
            var modeLabels = labels.modeLabels || {};
            var levelLabels = labels.levelLabels || {};

            return {
                search: '',
                norm: 'all',
                mode: 'all',
                level: 'all',
                city: 'all',
                activeCategory: 'all',
                categories: normalizedCategories,
                allCourses: allCourses,
                normOptions: Array.from(normSet).sort(),
                cityOptions: Array.from(citySet).sort(),
                modeOptions: Array.from(modeSet).sort(),
                levelOptions: Array.from(levelSet).sort(),
                formatAllLabel: formatAllLabel,
                levelAllLabel: levelAllLabel,
                normAllLabel: normAllLabel,
                cityAllLabel: cityAllLabel,
                resultCountTemplate: resultCountTemplate,
                detailsLabel: detailsLabel,
                noResultsLabel: noResultsLabel,
                wishlistLabel: wishlistLabel,
                modeLabels: modeLabels,
                levelLabels: levelLabels,

                getNormOptions: function () {
                    return ['all'].concat(this.normOptions);
                },

                getCityOptions: function () {
                    return ['all'].concat(this.cityOptions);
                },

                getFormats: function () {
                    return ['all'].concat(this.modeOptions);
                },

                getLevels: function () {
                    return ['all'].concat(this.levelOptions);
                },

                setCategory: function (slug) {
                    if (!slug || slug === 'all') {
                        this.activeCategory = 'all';
                        return;
                    }
                    this.activeCategory = slug;
                },

                filterCoursesForCategory: function (courses) {
                    if (!Array.isArray(courses)) {
                        return [];
                    }

                    var term = toLowerSafe(this.search).trim();
                    var selectedNorm = this.norm;
                    var selectedMode = this.mode;
                    var selectedLevel = this.level;
                    var selectedCity = this.city;

                    var results = [];

                    for (var i = 0; i < courses.length; i++) {
                        var course = courses[i];
                        if (!course) {
                            continue;
                        }

                        var matchesNorm = selectedNorm === 'all'
                            || (Array.isArray(course.norms) && course.norms.some(function (norm) { return equalsIgnoreCase(norm, selectedNorm); }));
                        var matchesMode = selectedMode === 'all' || equalsIgnoreCase(course.mode, selectedMode);
                        var matchesLevel = selectedLevel === 'all' || equalsIgnoreCase(course.level, selectedLevel);
                        var matchesCity = selectedCity === 'all'
                            || (Array.isArray(course.cities) && course.cities.some(function (city) { return equalsIgnoreCase(city, selectedCity); }));

                        var title = course.title || '';
                        var description = course.description || '';
                        var matchesTerm = term === ''
                            || toLowerSafe(title).indexOf(term) !== -1
                            || toLowerSafe(description).indexOf(term) !== -1;

                        if (matchesNorm && matchesMode && matchesLevel && matchesCity && matchesTerm) {
                            results.push(course);
                        }
                    }

                    return results;
                },

                getFilteredCategories: function () {
                    var results = [];
                    for (var i = 0; i < this.categories.length; i++) {
                        var category = this.categories[i];
                        if (!category) {
                            continue;
                        }

                        results.push({
                            id: category.id,
                            name: category.name,
                            slug: category.slug,
                            totalCourses: category.totalCourses,
                            filteredCourses: this.filterCoursesForCategory(category.courses)
                        });
                    }
                    return results;
                },

                getVisibleCategories: function () {
                    var filtered = this.getFilteredCategories();
                    if (this.activeCategory === 'all') {
                        return filtered.filter(function (category) { return category.filteredCourses.length > 0; });
                    }

                    var active = this.activeCategory;
                    return filtered.filter(function (category) { return equalsIgnoreCase(category.slug, active); });
                },

                filteredCountForCategory: function (slug) {
                    var filtered = this.getFilteredCategories();
                    var target = slug || '';
                    for (var i = 0; i < filtered.length; i++) {
                        if (equalsIgnoreCase(filtered[i].slug, target)) {
                            return filtered[i].filteredCourses.length;
                        }
                    }
                    return 0;
                },

                totalFilteredCount: function () {
                    var filtered = this.getFilteredCategories();
                    if (this.activeCategory === 'all') {
                        var total = 0;
                        for (var i = 0; i < filtered.length; i++) {
                            total += filtered[i].filteredCourses.length;
                        }
                        return total;
                    }

                    var active = this.activeCategory;
                    for (var j = 0; j < filtered.length; j++) {
                        if (equalsIgnoreCase(filtered[j].slug, active)) {
                            return filtered[j].filteredCourses.length;
                        }
                    }
                    return 0;
                },

                modeLabel: function (option) {
                    if (!option || option === 'all') {
                        return this.formatAllLabel;
                    }
                    return this.modeLabels[option] || option;
                },

                levelLabel: function (option) {
                    if (!option || option === 'all') {
                        return this.levelAllLabel;
                    }
                    return this.levelLabels[option] || option;
                },

                formatResultCount: function (count) {
                    try {
                        var template = this.resultCountTemplate || '{0}';
                        return template.replace('{0}', String(count || 0));
                    } catch (error) {
                        console.warn('Error formatting result count:', error);
                        return String(count || 0);
                    }
                },

                resetFilters: function () {
                    this.norm = 'all';
                    this.mode = 'all';
                    this.level = 'all';
                    this.city = 'all';
                    this.search = '';
                    this.activeCategory = 'all';
                }
            };
        }
    </script>
}