@page "{id:int}"
@model SysJaky_N.Pages.Courses.DetailsModel
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Collections.Generic
@using System.Globalization
@using SysJaky_N.Models
@inject IViewLocalizer Localizer
@{
    var metaTitle = string.IsNullOrWhiteSpace(Model.Course.MetaTitle)
        ? Model.Course.Title
        : Model.Course.MetaTitle.Trim();
    var metaDescriptionRaw = !string.IsNullOrWhiteSpace(Model.Course.MetaDescription)
        ? Model.Course.MetaDescription
        : Model.Course.Description;
    var metaDescription = metaDescriptionRaw?.ReplaceLineEndings(" ").Trim();
    var hasMetaDescription = !string.IsNullOrWhiteSpace(metaDescription);
    var ogImage = Model.Course.OpenGraphImage;
    var resolvedTitle = string.IsNullOrWhiteSpace(metaTitle) ? Model.Course.Title : metaTitle;
    ViewData["Title"] = resolvedTitle;
}

@section Head {
    <meta property="og:title" content="@resolvedTitle" />
    <meta property="og:type" content="website" />
    @if (hasMetaDescription)
    {
        <meta name="description" content="@metaDescription" />
        <meta property="og:description" content="@metaDescription" />
    }
    @if (!string.IsNullOrWhiteSpace(ogImage))
    {
        <meta property="og:image" content="@ogImage" />
    }
    @{
        var jsonLdDescription = (Model.Course.Description ?? string.Empty)
            .ReplaceLineEndings(" ")
            .Replace("\"", "'");

        var jsonLdData = new System.Text.Json.Nodes.JsonObject
        {
            ["@context"] = "https://schema.org",
            ["@type"] = "Course",
            ["name"] = Model.Course.Title,
            ["description"] = jsonLdDescription,
            ["provider"] = new System.Text.Json.Nodes.JsonObject
            {
                ["@type"] = "Organization",
                ["name"] = "Syst√©my jakosti",
                ["sameAs"] = "https://www.systemy-jakosti.cz/"
            },
            ["hasCourseInstance"] = new System.Text.Json.Nodes.JsonObject
            {
                ["@type"] = "CourseInstance",
                ["startDate"] = Model.Course.Date.ToString("yyyy-MM-dd"),
                ["courseMode"] = Model.Course.Mode.ToString(),
                ["offers"] = new System.Text.Json.Nodes.JsonObject
                {
                    ["@type"] = "Offer",
                    ["price"] = System.Text.Json.Nodes.JsonValue.Create(Model.Course.Price),
                    ["priceCurrency"] = "CZK",
                    ["availability"] = "https://schema.org/InStock"
                }
            }
        };

        var jsonLd = jsonLdData.ToJsonString(new System.Text.Json.JsonSerializerOptions
        {
            Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        });
    }
    <script type="application/ld+json">
        @Html.Raw(jsonLd)
    </script>
}

<h1 class="mb-3">@Model.Course.Title</h1>

@if (!string.IsNullOrEmpty(Model.Course.CoverImageUrl))
{
    <figure class="mb-4">
        @{ var separator = Model.Course.CoverImageUrl.Contains('?') ? "&" : "?"; var baseUrl = Model.Course.CoverImageUrl + separator; }
        <picture>
            <source type="image/webp" srcset="@($"{baseUrl}w=640&format=webp 640w, {baseUrl}w=960&format=webp 960w, {baseUrl}w=1440&format=webp 1440w")" sizes="(max-width: 992px) 100vw, 640px" />
            <img src="@($"{baseUrl}w=960&format=jpg")" srcset="@($"{baseUrl}w=640&format=jpg 640w, {baseUrl}w=960&format=jpg 960w, {baseUrl}w=1440&format=jpg 1440w")" sizes="(max-width: 992px) 100vw, 640px" alt="@Localizer["CourseImageAlt", Model.Course.Title]" class="img-fluid rounded" loading="lazy" decoding="async" />
        </picture>
    </figure>
}

@if (TempData["CartError"] is string cartError && !string.IsNullOrWhiteSpace(cartError))
{
    <div class="alert alert-danger" role="alert">@cartError</div>
}

<div class="row g-4">
    <div class="col-lg-8">
        @{
            var outcomeTopics = Model.Course.CourseTags?
                .Select(ct => ct.Tag?.Name)
                .Where(name => !string.IsNullOrWhiteSpace(name))
                .Distinct(System.StringComparer.OrdinalIgnoreCase)
                .ToList() ?? new List<string>();

            if (outcomeTopics.Count == 0)
            {
                outcomeTopics = new List<string>
                {
                    Localizer["OutcomeFallback1"].Value,
                    Localizer["OutcomeFallback2"].Value,
                    Localizer["OutcomeFallback3"].Value
                };
            }

            string levelSummary = Model.Course.Level switch
            {
                CourseLevel.Beginner => Localizer["LevelSummaryBeginner"].Value,
                CourseLevel.Intermediate => Localizer["LevelSummaryIntermediate"].Value,
                CourseLevel.Advanced => Localizer["LevelSummaryAdvanced"].Value,
                _ => Localizer["LevelSummaryDefault"].Value
            };

            string levelLimitation = Model.Course.Level switch
            {
                CourseLevel.Beginner => Localizer["LevelLimitationBeginner"].Value,
                CourseLevel.Intermediate => Localizer["LevelLimitationIntermediate"].Value,
                CourseLevel.Advanced => Localizer["LevelLimitationAdvanced"].Value,
                _ => Localizer["LevelLimitationDefault"].Value
            };

            string modePreference = Model.Course.Mode switch
            {
                CourseMode.SelfPaced => Localizer["ModePreferenceSelfPaced"].Value,
                CourseMode.InstructorLed => Localizer["ModePreferenceInstructorLed"].Value,
                CourseMode.Blended => Localizer["ModePreferenceBlended"].Value,
                _ => Localizer["ModePreferenceDefault"].Value
            };

            string modeLimitation = Model.Course.Mode switch
            {
                CourseMode.SelfPaced => Localizer["ModeLimitationSelfPaced"].Value,
                CourseMode.InstructorLed => Localizer["ModeLimitationInstructorLed"].Value,
                CourseMode.Blended => Localizer["ModeLimitationBlended"].Value,
                _ => Localizer["ModeLimitationDefault"].Value
            };

            var audienceFor = new List<string> { levelSummary, modePreference };
            if (Model.Course.CourseGroup is not null)
            {
                audienceFor.Add(Localizer["AudienceCourseGroup", Model.Course.CourseGroup.Name].Value);
            }

            var audienceNotFor = new List<string> { levelLimitation, modeLimitation };
            if (!Model.Course.IsActive)
            {
                audienceNotFor.Add(Localizer["AudienceInactive"].Value);
            }

            audienceFor = audienceFor
                .Where(item => !string.IsNullOrWhiteSpace(item))
                .Distinct(System.StringComparer.OrdinalIgnoreCase)
                .ToList();

            audienceNotFor = audienceNotFor
                .Where(item => !string.IsNullOrWhiteSpace(item))
                .Distinct(System.StringComparer.OrdinalIgnoreCase)
                .ToList();
        }

        @if (!string.IsNullOrWhiteSpace(Model.Course.Description))
        {
            <section class="mb-4">
                <h2 class="h5">@Localizer["AboutCourse"]</h2>
                <p>@Model.Course.Description</p>
            </section>
        }

        @if (Model.Terms.Any())
        {
            <section class="mb-4">
                <h2 class="h5">@Localizer["UpcomingTermsHeading"]</h2>
                <div class="table-responsive">
                    <table class="table align-middle">
                        <thead><tr><th>@Localizer["TermDate"]</th><th>@Localizer["TermLocation"]</th><th>@Localizer["TermAvailability"]</th><th class="text-end"></th></tr></thead>
                        <tbody>
                            @foreach (var term in Model.Terms)
                            {
                                var scarce = term.SeatsLeft <= 3 && term.SeatsLeft > 0;
                                var scarcityText = term.SeatsLeft switch
                                {
                                    1 => Localizer["ScarceSeatsOne", term.SeatsLeft].Value,
                                    2 or 3 or 4 => Localizer["ScarceSeatsFew", term.SeatsLeft].Value,
                                    _ => Localizer["ScarceSeatsMany", term.SeatsLeft].Value
                                };
                                <tr>
                                    <td>@term.StartsAt.ToString("d", CultureInfo.CurrentCulture)</td>
                                    <td>@(term.IsOnline ? Localizer["TermOnline"] : term.Location)</td>
                                    <td>
                                        @if (term.SeatsLeft == 0)
                                        {
                                            <span class="badge bg-secondary">@Localizer["TermFull"]</span>
                                        }
                                        else if (scarce)
                                        {
                                            <span class="badge bg-warning text-dark">@scarcityText</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">@Localizer["TermAvailable"]</span>
                                        }
                                    </td>
                                    <td class="text-end">
                                        <a class="btn btn-outline-secondary btn-sm" asp-page="/CourseTerms/Details" asp-route-id="@term.Id">@Localizer["TermDetailButton"]</a>
                                        <a class="btn btn-secondary btn-sm" href="/CourseTerms/ICS/@term.Id">@Localizer["TermIcsButton"]</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </section>
        }

        <section class="mb-4">
            <h2 class="h5 mb-3">@Localizer["LearningHeading"]</h2>
            <ul class="list-unstyled mb-0">
                @foreach (var topic in outcomeTopics)
                {
                    <li class="d-flex align-items-start gap-2 mb-2">
                        <i class="bi bi-check2 text-success"></i>
                        <span>@topic</span>
                    </li>
                }
            </ul>
        </section>

        <section class="mb-4">
            <div class="row g-4">
                <div class="col-md-6">
                    <h3 class="h6 text-uppercase text-muted mb-2">@Localizer["AudienceForHeading"]</h3>
                    <ul class="small text-muted mb-0">
                        @foreach (var item in audienceFor)
                        {
                            <li class="mb-1">@item</li>
                        }
                    </ul>
                </div>
                <div class="col-md-6">
                    <h3 class="h6 text-uppercase text-muted mb-2">@Localizer["AudienceNotForHeading"]</h3>
                    <ul class="small text-muted mb-0">
                        @foreach (var item in audienceNotFor)
                        {
                            <li class="mb-1">@item</li>
                        }
                    </ul>
                </div>
            </div>
        </section>

        <section class="mb-4">
            <h2 class="h5">@Localizer["DetailsHeading"]</h2>
            <ul class="list-unstyled small">
                <li><i class="bi bi-calendar2 me-2"></i>@Localizer["DetailDateLabel"]: @Model.Course.Date.ToString("d", CultureInfo.CurrentCulture)</li>
                <li><i class="bi bi-clock me-2"></i>@Localizer["DetailDurationLabel"]: @Localizer["MinutesValue", Model.Course.Duration]</li>
                <li><i class="bi bi-bar-chart me-2"></i>@Localizer["DetailLevelLabel"]: @Model.Course.Level</li>
                <li><i class="bi bi-laptop me-2"></i>@Localizer["DetailModeLabel"]: @Model.Course.Mode</li>
            </ul>
        </section>

        @if (Model.CourseBlock != null)
        {
            <section class="mb-4">
                <h2 class="h5">@Localizer["BlockHeading"]</h2>
                <p class="mb-2">@Model.CourseBlock.Description</p>
                <dl class="row small mb-3">
                    <dt class="col-sm-4">@Localizer["BlockNameLabel"]</dt>
                    <dd class="col-sm-8">@Model.CourseBlock.Title</dd>
                    <dt class="col-sm-4">@Localizer["BlockPriceLabel"]</dt>
                    <dd class="col-sm-8">@Model.CourseBlock.Price.ToString("C")</dd>
                </dl>
                <form method="post" asp-page-handler="OrderBlock" class="d-inline">
                    <input type="hidden" name="blockId" value="@Model.CourseBlock.Id" />
                    <button type="submit" class="btn btn-outline-primary btn-sm">@Localizer["OrderBlockButton"]</button>
                </form>
            </section>
        }

        <section class="mt-4">
            <h2 class="h5">@Localizer["LessonsHeading"]</h2>
            @if (Model.Lessons.Any())
            {
                <div class="list-group">
                    @foreach (var lesson in Model.Lessons)
                    {
                        Model.ProgressByLessonId.TryGetValue(lesson.Id, out var progressInfo);
                        var completion = progressInfo?.Progress ?? 0;
                        <div class="list-group-item">
                            <div class="d-flex flex-column gap-2">
                                <div class="d-flex justify-content-between flex-wrap gap-3">
                                    <div>
                                        <div class="fw-semibold">@Localizer["LessonOrderLabel", lesson.Order]</div>
                                        <div class="text-muted">@Localizer["LessonTypeLabel"]: @lesson.Type</div>
                                        @if (!string.IsNullOrWhiteSpace(lesson.ContentUrl))
                                        {
                                            <a class="link-primary" href="@lesson.ContentUrl" target="_blank" rel="noopener">@Localizer["LessonOpenContent"]</a>
                                        }
                                    </div>
                                    <div class="text-end">
                                        <div class="fw-semibold">@Localizer["LessonCompletion", completion]</div>
                                        @if (progressInfo is not null)
                                        {
                                            <div class="text-muted small">@Localizer["LessonLastSeen", progressInfo.LastSeenUtc.ToLocalTime().ToString("g", CultureInfo.CurrentCulture)]</div>
                                        }
                                    </div>
                                </div>
                                @if (User.Identity?.IsAuthenticated ?? false)
                                {
                                    <form method="post" asp-page-handler="UpdateProgress" asp-route-id="@Model.Course.Id" class="d-flex flex-column flex-sm-row align-items-sm-center gap-2">
                                        <input type="hidden" name="lessonId" value="@lesson.Id" />
                                        <div class="input-group input-group-sm" style="max-width: 220px;">
                                            <span class="input-group-text">@Localizer["LessonProgressLabel"]</span>
                                            <input type="number" class="form-control" name="progress" min="0" max="100" value="@completion" aria-label="@Localizer["LessonProgressAria", lesson.Order]" />
                                            <span class="input-group-text">%</span>
                                        </div>
                                        <div class="d-flex gap-2 flex-wrap">
                                            <button type="submit" class="btn btn-sm btn-primary">@Localizer["LessonSave"]</button>
                                            <button type="submit" class="btn btn-sm btn-outline-success" onclick="this.form.querySelector('[name=progress]').value = 100;">@Localizer["LessonMarkDone"]</button>
                                        </div>
                                    </form>
                                }
                                else
                                {
                                    <p class="text-muted small mb-0">@Localizer["SignInToTrack"]</p>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted">@Localizer["NoLessons"]</p>
            }
        </section>
    </div>
    <div class="col-lg-4">
        <div class="p-3 border rounded-3 position-sticky top-0">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <strong>@Localizer["PriceHeading"]</strong>
                <div class="fs-5 fw-bold">@Model.Course.Price.ToString("C")</div>
            </div>
            <ul class="list-unstyled small text-muted mb-3">
                <li><i class="bi bi-check-circle"></i> @Localizer["PriceBenefitCertificate"]</li>
                <li><i class="bi bi-check-circle"></i> @Localizer["PriceBenefitMaterials"]</li>
                <li><i class="bi bi-check-circle"></i> @Localizer["PriceBenefitCancellation"]</li>
            </ul>
            <div class="d-grid gap-2">
                <form method="post">
                    <button type="submit" class="btn btn-primary">@Localizer["EnrollButton"]</button>
                </form>
                <a class="btn btn-outline-secondary" asp-page="/Contact" asp-route-subject="@Localizer["ContactSubject", Model.Course.Title]">@Localizer["TeamButton"]</a>
            </div>
        </div>

        @if (User.Identity?.IsAuthenticated ?? false)
        {
            <form method="post" asp-page-handler="AddToWishlist" class="mt-3">
                <button type="submit" class="btn btn-outline-secondary w-100">@Localizer["WishlistButton"]</button>
            </form>
        }
    </div>
</div>

@if (Model.Reviews.Any())
{
    <section class="mt-5">
        <h2 class="h5">@Localizer["ReviewsHeading"]</h2>
        <ul class="list-unstyled">
            @foreach (var review in Model.Reviews)
            {
                <li class="mb-3">
                    <div class="fw-semibold">@review.Rating/5 &ndash; @review.User?.UserName</div>
                    <div class="text-muted small mb-1">@review.CreatedAt.ToShortDateString()</div>
                    <div>@review.Comment</div>
                </li>
            }
        </ul>
    </section>
}

@if (User.Identity?.IsAuthenticated ?? false)
{
    <section class="mt-4">
        <h3 class="h5">@Localizer["AddReviewHeading"]</h3>
        <form method="post" asp-page-handler="Review">
            <div class="mb-3">
                <label asp-for="NewReview.Rating" class="form-label"></label>
                <input asp-for="NewReview.Rating" class="form-control" min="1" max="5" />
                <span asp-validation-for="NewReview.Rating" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="NewReview.Comment" class="form-label"></label>
                <textarea asp-for="NewReview.Comment" class="form-control"></textarea>
                <span asp-validation-for="NewReview.Comment" class="text-danger"></span>
            </div>
            <button type="submit" class="btn btn-success">@Localizer["SubmitReviewButton"]</button>
        </form>
    </section>
}
else
{
    <p class="mt-4"><a asp-page="/Account/Login">@Localizer["SignInLinkText"]</a> @Localizer["ReviewSignInSuffix"]</p>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

