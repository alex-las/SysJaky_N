@page
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model SysJaky_N.Pages.CorporateInquiryModel
@{ 
    ViewData["Title"] = Localizer["Title"];
    var shouldResetStorage = TempData.Peek("Success") is string;
    var modeLabels = new System.Collections.Generic.Dictionary<string, string>();
    foreach (var option in Model.ModeOptions)
    {
        modeLabels[option] = Localizer[$"ModeOption_{option}"].Value;
    }
    var modeLabelsJson = System.Text.Json.JsonSerializer.Serialize(modeLabels);
    var serviceTypeLabels = new System.Collections.Generic.Dictionary<string, string>();
    foreach (var option in Model.ServiceTypeOptions)
    {
        serviceTypeLabels[option] = Localizer[$"ServiceType_{option}"].Value;
    }
    var serviceTypeLabelsJson = System.Text.Json.JsonSerializer.Serialize(serviceTypeLabels);
    var trainingLevelLabels = new System.Collections.Generic.Dictionary<string, string>();
    foreach (var option in Model.TrainingLevelOptions)
    {
        trainingLevelLabels[option] = Localizer[$"TrainingLevel_{option}"].Value;
    }
    var trainingLevelLabelsJson = System.Text.Json.JsonSerializer.Serialize(trainingLevelLabels);
}

<h1 class="mb-4">@Localizer["Title"]</h1>
<p class="text-muted mb-5">@Localizer["Intro"]</p>

<noscript>
    <div class="alert alert-warning" role="alert">@Localizer["EnableJavaScriptWarning"]</div>
</noscript>

<div class="progress mb-4" aria-label="@Localizer["ProgressAriaLabel"]">
    <div id="wizardProgressBar" class="progress-bar" role="progressbar" style="width:20%;" aria-valuenow="1" aria-valuemin="1" aria-valuemax="5">1 / 5</div>
</div>

@if (TempData["Success"] is string success && !string.IsNullOrEmpty(success))
{
    <div class="alert alert-success" role="alert" id="successAlert">@success</div>
}

<form method="post"
      id="corporateInquiryForm"
      data-initial-step="@Model.InitialStep"
      data-reset-storage="@shouldResetStorage.ToString().ToLowerInvariant()"
      data-base-price="@Model.BaseTrainingPrice"
      data-participant-price="@Model.ParticipantPrice"
      data-mode-multipliers='@Html.Raw(Model.ModeMultipliersJson)'
      data-mode-labels='@Html.Raw(modeLabelsJson)'
      data-service-multipliers='@Html.Raw(Model.ServiceTypeMultipliersJson)'
      data-level-multipliers='@Html.Raw(Model.TrainingLevelMultipliersJson)'
      data-service-labels='@Html.Raw(serviceTypeLabelsJson)'
      data-level-labels='@Html.Raw(trainingLevelLabelsJson)'
      data-summary-placeholder="@Localizer["SummaryPlaceholder"]"
      data-price-unavailable="@Localizer["PriceUnavailable"]"
      data-validation-service-required="@Localizer["ValidationServiceTypeRequired"]"
      data-validation-training-types="@Localizer["ValidationTrainingTypesRequired"]"
      data-validation-participant-required="@Localizer["ValidationParticipantRequired"]"
      data-validation-participant-range="@Localizer["ValidationParticipantRange"]"
      data-validation-date-required="@Localizer["ValidationDateRequired"]"
      data-validation-mode-required="@Localizer["ValidationModeRequired"]"
      data-validation-training-level-required="@Localizer["ValidationTrainingLevelRequired"]"
      data-validation-location-required="@Localizer["ValidationLocationRequired"]"
      data-validation-company-id-required="@Localizer["ValidationCompanyIdRequired"]"
      data-validation-company-name-required="@Localizer["ValidationCompanyNameRequired"]"
      data-validation-contact-person-required="@Localizer["ValidationContactPersonRequired"]"
      data-validation-contact-email-required="@Localizer["ValidationContactEmailRequired"]"
      data-validation-contact-email-invalid="@Localizer["ValidationContactEmailInvalid"]"
      data-validation-contact-phone-required="@Localizer["ValidationContactPhoneRequired"]"
      data-validation-contact-phone-invalid="@Localizer["ValidationContactPhoneInvalid"]"
      novalidate>
    <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

    <div class="wizard-step" data-step="1">
        <partial name="CorporateInquiry/Partials/_StepServiceType" model="Model" />
    </div>

    <div class="wizard-step d-none" data-step="2">
        <partial name="CorporateInquiry/Partials/_StepTraining" model="Model" />
    </div>

    <div class="wizard-step d-none" data-step="3">
        <partial name="CorporateInquiry/Partials/_StepDetails" model="Model" />
    </div>

    <div class="wizard-step d-none" data-step="4">
        <partial name="CorporateInquiry/Partials/_StepCompany" model="Model" />
    </div>

    <div class="wizard-step d-none" data-step="5">
        <partial name="CorporateInquiry/Partials/_StepSummary" model="Model" />
    </div>

    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mt-4">
        <button type="button" class="btn btn-outline-secondary" id="wizardPrev">@Localizer["Back"]</button>
        <div class="d-flex flex-column flex-md-row align-items-md-center gap-3 ms-md-auto">
            <div class="fw-semibold" id="priceEstimateContainer">
                @Localizer["EstimatedPriceLabel"]: <span id="priceEstimateValue">@Localizer["EstimatedPricePlaceholder"]</span>
            </div>
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-primary" id="wizardNext">@Localizer["Next"]</button>
                <button type="submit" class="btn btn-success d-none" id="wizardSubmit">@Localizer["Submit"]</button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const form = document.getElementById('corporateInquiryForm');
            if (!form) {
                return;
            }

            const steps = Array.from(document.querySelectorAll('.wizard-step'));
            const progressBar = document.getElementById('wizardProgressBar');
            const prevButton = document.getElementById('wizardPrev');
            const nextButton = document.getElementById('wizardNext');
            const submitButton = document.getElementById('wizardSubmit');
            const priceValue = document.getElementById('priceEstimateValue');
            const storageKey = 'corporateInquiryDraft';
            const serviceTypeRadios = Array.from(form.querySelectorAll('input[name="Input.ServiceType"]'));
            const isoCheckboxes = Array.from(form.querySelectorAll('input[name="Input.TrainingTypes"]'));
            const participantInput = form.querySelector('[name="Input.ParticipantCount"]');
            const dateInput = form.querySelector('[name="Input.PreferredDate"]');
            const trainingLevelRadios = Array.from(form.querySelectorAll('input[name="Input.TrainingLevel"]'));
            const modeRadios = Array.from(form.querySelectorAll('input[name="Input.Mode"]'));
            const locationInput = form.querySelector('[name="Input.Location"]');
            const specialRequirementsInput = form.querySelector('[name="Input.SpecialRequirements"]');
            const participantDisplay = document.getElementById('participant-count-display');
            const locationContainer = form.querySelector('[data-location-container]');
            const companyIdInput = form.querySelector('[name="Input.CompanyId"]');
            const companyNameInput = form.querySelector('[name="Input.CompanyName"]');
            const contactPersonInput = form.querySelector('[name="Input.ContactPerson"]');
            const contactEmailInput = form.querySelector('[name="Input.ContactEmail"]');
            const contactPhoneInput = form.querySelector('[name="Input.ContactPhone"]');
            const trainingTypesError = document.getElementById('training-types-error');

            const summaryElements = {
                serviceType: document.getElementById('summary-service-type'),
                trainingTypes: document.getElementById('summary-training-types'),
                participantCount: document.getElementById('summary-participant-count'),
                preferredDate: document.getElementById('summary-preferred-date'),
                mode: document.getElementById('summary-mode'),
                trainingLevel: document.getElementById('summary-training-level'),
                location: document.getElementById('summary-location'),
                specialRequirements: document.getElementById('summary-special-requirements'),
                companyId: document.getElementById('summary-company-id'),
                companyName: document.getElementById('summary-company-name'),
                contactPerson: document.getElementById('summary-contact-person'),
                contactEmail: document.getElementById('summary-contact-email'),
                contactPhone: document.getElementById('summary-contact-phone'),
                price: document.getElementById('summary-price')
            };

            const validationMessages = {
                serviceTypeRequired: form.dataset.validationServiceRequired,
                trainingTypesRequired: form.dataset.validationTrainingTypes,
                participantCountRequired: form.dataset.validationParticipantRequired,
                participantCountRange: form.dataset.validationParticipantRange,
                preferredDateRequired: form.dataset.validationDateRequired,
                modeRequired: form.dataset.validationModeRequired,
                trainingLevelRequired: form.dataset.validationTrainingLevelRequired,
                locationRequired: form.dataset.validationLocationRequired,
                companyIdRequired: form.dataset.validationCompanyIdRequired,
                companyNameRequired: form.dataset.validationCompanyNameRequired,
                contactPersonRequired: form.dataset.validationContactPersonRequired,
                contactEmailRequired: form.dataset.validationContactEmailRequired,
                contactEmailInvalid: form.dataset.validationContactEmailInvalid,
                contactPhoneRequired: form.dataset.validationContactPhoneRequired,
                contactPhoneInvalid: form.dataset.validationContactPhoneInvalid
            };

            const modeLabels = JSON.parse(form.dataset.modeLabels || '{}');
            const serviceLabels = JSON.parse(form.dataset.serviceLabels || '{}');
            const trainingLevelLabels = JSON.parse(form.dataset.levelLabels || '{}');
            const basePrice = Number(form.dataset.basePrice || 0);
            const participantPrice = Number(form.dataset.participantPrice || 0);
            const modeMultipliers = JSON.parse(form.dataset.modeMultipliers || '{}');
            const serviceMultipliers = JSON.parse(form.dataset.serviceMultipliers || '{}');
            const levelMultipliers = JSON.parse(form.dataset.levelMultipliers || '{}');
            const totalSteps = steps.length;
            const dateFormatter = new Intl.DateTimeFormat(document.documentElement.lang || undefined, { dateStyle: 'medium' });
            const currencyFormatter = new Intl.NumberFormat(document.documentElement.lang || undefined, { style: 'currency', currency: 'CZK', maximumFractionDigits: 0 });
            const locationRequiredModes = ['InPerson', 'Hybrid'];
            const summaryPlaceholder = form.dataset.summaryPlaceholder || '';

            const initialStepFromServer = Number(form.dataset.initialStep || '1');
            let currentStep = Number.isNaN(initialStepFromServer) || initialStepFromServer < 1 || initialStepFromServer > totalSteps
                ? 1
                : initialStepFromServer;

            if (form.dataset.resetStorage === 'true') {
                try {
                    localStorage.removeItem(storageKey);
                } catch (error) {
                    console.warn('Unable to reset corporate inquiry draft', error);
                }
            }

            const savedState = loadState();
            if (savedState) {
                applyState(savedState);
                if (initialStepFromServer > 1) {
                    currentStep = Math.min(Math.max(initialStepFromServer, 1), totalSteps);
                } else if (savedState.currentStep) {
                    currentStep = Math.min(Math.max(savedState.currentStep, 1), totalSteps);
                }
            }

            toggleLocationField();
            updateParticipantDisplay();
            updateStep(currentStep);
            updateSummary();
            updatePrice();

            prevButton.addEventListener('click', () => {
                if (currentStep > 1) {
                    currentStep -= 1;
                    updateStep(currentStep);
                    persistState();
                }
            });

            nextButton.addEventListener('click', () => {
                if (validateStep(currentStep)) {
                    currentStep += 1;
                    updateStep(currentStep);
                    updateSummary();
                    updatePrice();
                    persistState();
                }
            });

            form.addEventListener('submit', (event) => {
                if (!validateStep(currentStep) || !validateAllSteps()) {
                    event.preventDefault();
                    return;
                }
                persistState();
            });

            const trackedFields = [participantInput, dateInput, locationInput, specialRequirementsInput, companyIdInput, companyNameInput, contactPersonInput, contactEmailInput, contactPhoneInput];
            trackedFields.forEach(field => {
                if (!field) {
                    return;
                }
                field.addEventListener('input', () => {
                    showFieldError(field.name, '');
                    if (field === participantInput) {
                        updateParticipantDisplay();
                    }
                    updatePrice();
                    updateSummary();
                    persistState();
                });
                field.addEventListener('change', () => {
                    showFieldError(field.name, '');
                    if (field === participantInput) {
                        updateParticipantDisplay();
                    }
                    updatePrice();
                    updateSummary();
                    persistState();
                });
            });

            serviceTypeRadios.forEach(radio => {
                radio.addEventListener('change', () => {
                    showFieldError('Input.ServiceType', '');
                    updatePrice();
                    updateSummary();
                    persistState();
                });
            });

            trainingLevelRadios.forEach(radio => {
                radio.addEventListener('change', () => {
                    showFieldError('Input.TrainingLevel', '');
                    updatePrice();
                    updateSummary();
                    persistState();
                });
            });

            modeRadios.forEach(radio => {
                radio.addEventListener('change', () => {
                    showFieldError('Input.Mode', '');
                    toggleLocationField();
                    updatePrice();
                    updateSummary();
                    persistState();
                });
            });

            isoCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    if (trainingTypesError) {
                        trainingTypesError.textContent = '';
                        trainingTypesError.classList.add('d-none');
                    }
                    updatePrice();
                    updateSummary();
                    persistState();
                });
            });

            function collectFormState() {
                return {
                    serviceType: getCheckedValue(serviceTypeRadios),
                    trainingTypes: isoCheckboxes.filter(c => c.checked).map(c => c.value),
                    participantCount: participantInput ? participantInput.value : '',
                    preferredDate: dateInput ? dateInput.value : '',
                    trainingLevel: getCheckedValue(trainingLevelRadios),
                    mode: getCheckedValue(modeRadios),
                    location: locationInput ? locationInput.value : '',
                    specialRequirements: specialRequirementsInput ? specialRequirementsInput.value : '',
                    companyId: companyIdInput ? companyIdInput.value : '',
                    companyName: companyNameInput ? companyNameInput.value : '',
                    contactPerson: contactPersonInput ? contactPersonInput.value : '',
                    contactEmail: contactEmailInput ? contactEmailInput.value : '',
                    contactPhone: contactPhoneInput ? contactPhoneInput.value : '',
                    currentStep
                };
            }

            function applyState(state) {
                setCheckedValue(serviceTypeRadios, state.serviceType);
                isoCheckboxes.forEach(checkbox => {
                    checkbox.checked = Array.isArray(state.trainingTypes) && state.trainingTypes.includes(checkbox.value);
                });
                if (participantInput && state.participantCount !== undefined) {
                    participantInput.value = state.participantCount;
                }
                if (dateInput && state.preferredDate !== undefined) {
                    dateInput.value = state.preferredDate;
                }
                setCheckedValue(trainingLevelRadios, state.trainingLevel);
                setCheckedValue(modeRadios, state.mode);
                if (locationInput && state.location !== undefined) {
                    locationInput.value = state.location;
                }
                if (specialRequirementsInput && state.specialRequirements !== undefined) {
                    specialRequirementsInput.value = state.specialRequirements;
                }
                if (companyIdInput && state.companyId !== undefined) {
                    companyIdInput.value = state.companyId;
                }
                if (companyNameInput && state.companyName !== undefined) {
                    companyNameInput.value = state.companyName;
                }
                if (contactPersonInput && state.contactPerson !== undefined) {
                    contactPersonInput.value = state.contactPerson;
                }
                if (contactEmailInput && state.contactEmail !== undefined) {
                    contactEmailInput.value = state.contactEmail;
                }
                if (contactPhoneInput && state.contactPhone !== undefined) {
                    contactPhoneInput.value = state.contactPhone;
                }
                toggleLocationField();
                updateParticipantDisplay();
            }

            function loadState() {
                try {
                    const raw = localStorage.getItem(storageKey);
                    return raw ? JSON.parse(raw) : null;
                } catch (error) {
                    console.warn('Unable to load corporate inquiry draft', error);
                    return null;
                }
            }

            function persistState() {
                const state = collectFormState();
                try {
                    localStorage.setItem(storageKey, JSON.stringify(state));
                } catch (error) {
                    console.warn('Unable to persist corporate inquiry draft', error);
                }
            }

            function updateStep(step) {
                steps.forEach((element, index) => {
                    const isActive = index === step - 1;
                    element.classList.toggle('d-none', !isActive);
                    element.setAttribute('aria-hidden', isActive ? 'false' : 'true');
                });

                prevButton.classList.toggle('d-none', step === 1);
                prevButton.disabled = step === 1;
                nextButton.classList.toggle('d-none', step === totalSteps);
                submitButton.classList.toggle('d-none', step !== totalSteps);

                const progressPercent = Math.round((step / totalSteps) * 100);
                progressBar.style.width = `${progressPercent}%`;
                progressBar.setAttribute('aria-valuenow', String(step));
                progressBar.textContent = `${step} / ${totalSteps}`;
            }

            function showFieldError(fieldName, message) {
                const messageElement = form.querySelector(`[data-valmsg-for="${fieldName}"]`);
                if (messageElement) {
                    messageElement.textContent = message || '';
                    if (message) {
                        messageElement.classList.remove('d-none');
                        if (messageElement.classList.contains('invalid-feedback') && !messageElement.classList.contains('d-block')) {
                            messageElement.classList.add('d-block');
                        }
                    } else if (!messageElement.classList.contains('d-block')) {
                        messageElement.classList.add('d-none');
                    }
                }
                const fields = Array.from(form.querySelectorAll(`[name="${fieldName}"]`));
                if (!fields.length) {
                    return;
                }
                fields.forEach(field => {
                    if (message) {
                        field.classList.add('is-invalid');
                        field.setAttribute('aria-invalid', 'true');
                    } else {
                        field.classList.remove('is-invalid');
                        field.removeAttribute('aria-invalid');
                    }
                });
            }

            function validateStep(step) {
                let isValid = true;
                clearStepErrors(step);

                if (step === 1) {
                    const serviceTypeValue = getCheckedValue(serviceTypeRadios);
                    if (!serviceTypeValue) {
                        isValid = false;
                        showFieldError('Input.ServiceType', validationMessages.serviceTypeRequired);
                    }
                } else if (step === 2) {
                    const selectedTrainings = isoCheckboxes.filter(c => c.checked);
                    if (selectedTrainings.length === 0) {
                        isValid = false;
                        if (trainingTypesError) {
                            trainingTypesError.textContent = validationMessages.trainingTypesRequired || '';
                            trainingTypesError.classList.remove('d-none');
                        }
                    }
                } else if (step === 3) {
                    const participantValue = participantInput ? Number(participantInput.value) : 0;
                    if (!participantInput || participantInput.value.trim() === '') {
                        isValid = false;
                        showFieldError('Input.ParticipantCount', validationMessages.participantCountRequired);
                    } else if (Number.isNaN(participantValue) || participantValue < 1 || participantValue > 1000) {
                        isValid = false;
                        showFieldError('Input.ParticipantCount', validationMessages.participantCountRange);
                    }

                    if (!dateInput || dateInput.value.trim() === '') {
                        isValid = false;
                        showFieldError('Input.PreferredDate', validationMessages.preferredDateRequired);
                    }

                    const trainingLevelValue = getCheckedValue(trainingLevelRadios);
                    if (!trainingLevelValue) {
                        isValid = false;
                        showFieldError('Input.TrainingLevel', validationMessages.trainingLevelRequired);
                    }

                    const modeValue = getCheckedValue(modeRadios);
                    if (!modeValue) {
                        isValid = false;
                        showFieldError('Input.Mode', validationMessages.modeRequired);
                    }

                    if (locationInput) {
                        if (locationRequiredModes.includes(modeValue) && locationInput.value.trim() === '') {
                            isValid = false;
                            showFieldError('Input.Location', validationMessages.locationRequired);
                        } else if (!locationRequiredModes.includes(modeValue)) {
                            showFieldError('Input.Location', '');
                        }
                    }
                } else if (step === 4) {
                    if (!companyIdInput || companyIdInput.value.trim() === '') {
                        isValid = false;
                        showFieldError('Input.CompanyId', validationMessages.companyIdRequired);
                    }
                    if (!companyNameInput || companyNameInput.value.trim() === '') {
                        isValid = false;
                        showFieldError('Input.CompanyName', validationMessages.companyNameRequired);
                    }
                    if (!contactPersonInput || contactPersonInput.value.trim() === '') {
                        isValid = false;
                        showFieldError('Input.ContactPerson', validationMessages.contactPersonRequired);
                    }
                    if (!contactEmailInput || contactEmailInput.value.trim() === '') {
                        isValid = false;
                        showFieldError('Input.ContactEmail', validationMessages.contactEmailRequired);
                    } else if (!isValidEmail(contactEmailInput.value)) {
                        isValid = false;
                        showFieldError('Input.ContactEmail', validationMessages.contactEmailInvalid);
                    }
                    if (!contactPhoneInput || contactPhoneInput.value.trim() === '') {
                        isValid = false;
                        showFieldError('Input.ContactPhone', validationMessages.contactPhoneRequired);
                    } else if (!isValidPhone(contactPhoneInput.value)) {
                        isValid = false;
                        showFieldError('Input.ContactPhone', validationMessages.contactPhoneInvalid);
                    }
                }

                if (isValid && step === 2 && trainingTypesError) {
                    trainingTypesError.textContent = '';
                    trainingTypesError.classList.add('d-none');
                }

                return isValid;
            }

            function validateAllSteps() {
                let valid = true;
                for (let step = 1; step <= totalSteps - 1; step += 1) {
                    if (!validateStep(step)) {
                        valid = false;
                        currentStep = step;
                        updateStep(currentStep);
                        updateSummary();
                        updatePrice();
                        break;
                    }
                }
                return valid;
            }

            function clearStepErrors(step) {
                if (step === 2 && trainingTypesError) {
                    trainingTypesError.textContent = '';
                    trainingTypesError.classList.add('d-none');
                }

                const fields = ['Input.ServiceType', 'Input.TrainingTypes', 'Input.ParticipantCount', 'Input.PreferredDate', 'Input.TrainingLevel', 'Input.Mode', 'Input.Location', 'Input.CompanyId', 'Input.CompanyName', 'Input.ContactPerson', 'Input.ContactEmail', 'Input.ContactPhone'];
                fields.forEach(fieldName => {
                    showFieldError(fieldName, '');
                });
            }

            function updateSummary() {
                if (!summaryElements.serviceType) {
                    return;
                }

                const serviceTypeValue = getCheckedValue(serviceTypeRadios);
                summaryElements.serviceType.textContent = serviceTypeValue ? (serviceLabels[serviceTypeValue] || serviceTypeValue) : summaryPlaceholder;

                const selectedTrainings = isoCheckboxes.filter(c => c.checked).map(checkbox => {
                    const label = form.querySelector(`label[for="${checkbox.id}"]`);
                    return label ? label.textContent.trim() : checkbox.value;
                });
                summaryElements.trainingTypes.textContent = selectedTrainings.length ? selectedTrainings.join(', ') : summaryPlaceholder;

                if (participantInput && participantInput.value) {
                    const participantValue = Number(participantInput.value);
                    summaryElements.participantCount.textContent = Number.isNaN(participantValue) ? participantInput.value : (participantValue >= 50 ? '50+' : participantValue.toString());
                } else {
                    summaryElements.participantCount.textContent = summaryPlaceholder;
                }

                if (dateInput && dateInput.value) {
                    const date = new Date(dateInput.value);
                    summaryElements.preferredDate.textContent = Number.isNaN(date.getTime()) ? summaryPlaceholder : dateFormatter.format(date);
                } else {
                    summaryElements.preferredDate.textContent = summaryPlaceholder;
                }

                const modeValue = getCheckedValue(modeRadios);
                summaryElements.mode.textContent = modeValue ? (modeLabels[modeValue] || modeValue) : summaryPlaceholder;

                const trainingLevelValue = getCheckedValue(trainingLevelRadios);
                summaryElements.trainingLevel.textContent = trainingLevelValue ? (trainingLevelLabels[trainingLevelValue] || trainingLevelValue) : summaryPlaceholder;

                summaryElements.location.textContent = locationInput && locationInput.value ? locationInput.value : summaryPlaceholder;

                const specialText = specialRequirementsInput && specialRequirementsInput.value ? specialRequirementsInput.value.trim() : '';
                summaryElements.specialRequirements.textContent = specialText ? specialText : summaryPlaceholder;

                summaryElements.companyId.textContent = companyIdInput && companyIdInput.value ? companyIdInput.value : summaryPlaceholder;
                summaryElements.companyName.textContent = companyNameInput && companyNameInput.value ? companyNameInput.value : summaryPlaceholder;
                summaryElements.contactPerson.textContent = contactPersonInput && contactPersonInput.value ? contactPersonInput.value : summaryPlaceholder;
                summaryElements.contactEmail.textContent = contactEmailInput && contactEmailInput.value ? contactEmailInput.value : summaryPlaceholder;
                summaryElements.contactPhone.textContent = contactPhoneInput && contactPhoneInput.value ? contactPhoneInput.value : summaryPlaceholder;

                const estimated = calculatePrice();
                summaryElements.price.textContent = estimated > 0 ? currencyFormatter.format(estimated) : form.dataset.priceUnavailable;
            }

            function updatePrice() {
                const estimated = calculatePrice();
                priceValue.textContent = estimated > 0 ? currencyFormatter.format(estimated) : form.dataset.priceUnavailable;
            }

            function calculatePrice() {
                const trainingCount = isoCheckboxes.filter(c => c.checked).length;
                const participants = participantInput ? Number(participantInput.value) : 0;
                const serviceTypeValue = getCheckedValue(serviceTypeRadios);
                const trainingLevelValue = getCheckedValue(trainingLevelRadios);
                const modeValue = getCheckedValue(modeRadios);

                if (trainingCount === 0 || !serviceTypeValue || Number.isNaN(participants) || participants <= 0) {
                    return 0;
                }

                const serviceMultiplier = Number(serviceMultipliers[serviceTypeValue] ?? 1);
                const levelMultiplier = Number(levelMultipliers[trainingLevelValue] ?? 1);
                const modeMultiplier = Number(modeMultipliers[modeValue] ?? 1);

                const baseTotal = basePrice * trainingCount * serviceMultiplier;
                const participantTotal = participantPrice * participants;

                return Math.round((baseTotal + participantTotal) * levelMultiplier * modeMultiplier);
            }

            function toggleLocationField() {
                if (!locationContainer) {
                    return;
                }
                const modeValue = getCheckedValue(modeRadios);
                const shouldShow = locationRequiredModes.includes(modeValue);
                locationContainer.classList.toggle('d-none', !shouldShow);
                if (!shouldShow && locationInput) {
                    locationInput.value = '';
                    showFieldError('Input.Location', '');
                }
            }

            function updateParticipantDisplay() {
                if (!participantDisplay) {
                    return;
                }
                if (!participantInput || participantInput.value.trim() === '') {
                    participantDisplay.textContent = summaryPlaceholder || '—';
                    return;
                }
                const value = Number(participantInput.value);
                if (Number.isNaN(value)) {
                    participantDisplay.textContent = participantInput.value;
                    return;
                }
                participantDisplay.textContent = value >= 50 ? '50+' : value.toString();
            }

            function getCheckedValue(inputs) {
                const selected = inputs.find(input => input.checked);
                return selected ? selected.value : '';
            }

            function setCheckedValue(inputs, value) {
                if (!Array.isArray(inputs)) {
                    return;
                }
                inputs.forEach(input => {
                    input.checked = Boolean(value) && input.value === value;
                });
            }

            function isValidEmail(value) {
                return /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/.test(value);
            }

            function isValidPhone(value) {
                return /^\+?[0-9()\s-]{6,}$/.test(value.trim());
            }
        })();
    </script>
}
