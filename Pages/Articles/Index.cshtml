@page
@model SysJaky_N.Pages.Articles.IndexModel
@using System.Globalization
@using System.Linq
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@functions {
    public record ArticleCard(
        int Id,
        string Title,
        string Excerpt,
        DateTime PublishedAt,
        string PublishedAtText,
        string CategoryKey,
        string CategoryLabel,
        string SearchText
    );

    public record CategoryOption(string Name, string Key);

    private static string CreateExcerpt(string content, int maxLength)
    {
        if (string.IsNullOrWhiteSpace(content))
        {
            return string.Empty;
        }

        var withoutHtml = Regex.Replace(content, "<.*?>", " ");
        var normalized = Regex.Replace(withoutHtml, "\\s+", " ").Trim();

        if (normalized.Length <= maxLength)
        {
            return normalized;
        }

        var truncated = normalized[..Math.Min(normalized.Length, maxLength)].TrimEnd(' ', ',', '.', ';', ':');
        return $"{truncated}â€¦";
    }

    private static DateTime ToLocalPublicationTime(DateTime createdAt)
    {
        var kind = createdAt.Kind == DateTimeKind.Unspecified
            ? DateTimeKind.Utc
            : createdAt.Kind;

        return DateTime.SpecifyKind(createdAt, kind).ToLocalTime();
    }

    private static string BuildSearchText(string title, string content, CultureInfo culture)
    {
        var withoutHtml = Regex.Replace(content ?? string.Empty, "<.*?>", " ");
        var normalized = Regex.Replace(withoutHtml, "\\s+", " ").Trim();
        return $"{title} {normalized}".ToLower(culture);
    }
}
@{
    ViewData["Title"] = Localizer["PageTitle"];
    var culture = CultureInfo.CurrentUICulture;
    var searchValue = Model.SearchString ?? string.Empty;

    var articleCards = Model.Articles
        .Select(article =>
        {
            var publishedAt = ToLocalPublicationTime(article.CreatedAt);
            var categoryKey = publishedAt.ToString("yyyy", CultureInfo.InvariantCulture);

            return new ArticleCard(
                article.Id,
                article.Title,
                CreateExcerpt(article.Content, 220),
                publishedAt,
                publishedAt.ToString("d. MMMM yyyy", culture),
                categoryKey,
                publishedAt.ToString("yyyy", culture),
                BuildSearchText(article.Title, article.Content, culture)
            );
        })
        .ToList();

    var categories = articleCards
        .Select(a => new CategoryOption(a.CategoryLabel, a.CategoryKey))
        .DistinctBy(c => c.Key)
        .OrderByDescending(c => c.Key)
        .ToList();

    var showCategoryFilters = categories.Count > 1;
    var currentPage = Math.Max(1, Model.PageNumber);
    var totalPages = Model.TotalPages;
    var searchRouteValue = string.IsNullOrWhiteSpace(searchValue) ? null : searchValue;
}

<section class="articles-hero">
    <div class="articles-hero__content">
        <p class="text-uppercase fw-semibold text-primary mb-2">@Localizer["HeroBadge"]</p>
        <h1 class="display-5 fw-bold mb-3">@Localizer["HeroHeadline"]</h1>
        <p class="lead text-muted mb-0">@Localizer["HeroSubheadline"]</p>
    </div>
</section>

<section class="articles-toolbar" aria-label="@Localizer["ToolbarAriaLabel"]">
    <form method="get" class="toolbar-group toolbar-group--search" role="search" aria-label="@Localizer["SearchAriaLabel"]">
        <input type="hidden" name="PageNumber" value="1" />
        <label for="articleSearch" class="form-label fw-semibold">@Localizer["SearchLabel"]</label>
        <div class="input-group">
            <input
                type="search"
                id="articleSearch"
                name="SearchString"
                value="@searchValue"
                class="form-control"
                placeholder="@Localizer["SearchPlaceholder"]"
                data-articles-search
                aria-describedby="articleSearchHelp"
                aria-label="@Localizer["SearchInputAriaLabel"]" />
            <button type="submit" class="btn btn-primary">@Localizer["SearchButton"]</button>
        </div>
        <div id="articleSearchHelp" class="form-text">@Localizer["SearchHelpText"]</div>
    </form>
    @if (showCategoryFilters)
    {
        <div class="toolbar-group toolbar-group--filters" role="group" aria-labelledby="articleFiltersLabel">
            <div class="d-flex align-items-center gap-2 mb-2">
                <i class="bi bi-filter fs-5 text-primary" aria-hidden="true"></i>
                <span id="articleFiltersLabel" class="fw-semibold">@Localizer["FilterLabel"]</span>
            </div>
            <div class="toolbar-filters" data-filter-checkboxes>
                @foreach (var category in categories)
                {
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" value="@category.Key" id="filter-@category.Key" checked data-category-filter />
                        <label class="form-check-label" for="filter-@category.Key">@category.Name</label>
                    </div>
                }
            </div>
        </div>
    }
    <div class="toolbar-group toolbar-group--view" role="group" aria-label="@Localizer["ViewToggleAriaLabel"]">
        <button type="button" class="btn btn-outline-primary active" data-view-toggle="grid" aria-pressed="true">
            <i class="bi bi-grid" aria-hidden="true"></i>
            <span class="ms-2">@Localizer["GridView"]</span>
        </button>
        <button type="button" class="btn btn-outline-primary" data-view-toggle="list" aria-pressed="false">
            <i class="bi bi-list" aria-hidden="true"></i>
            <span class="ms-2">@Localizer["ListView"]</span>
        </button>
    </div>
</section>

<section class="articles-results" aria-live="polite">
    <div id="articlesLiveRegion" class="visually-hidden" aria-live="polite" aria-atomic="true"></div>
    @if (articleCards.Any())
    {
        <div class="article-list article-list--grid" data-articles-list data-view="grid" data-live-singular="@Localizer["LiveRegionSingular"]" data-live-plural="@Localizer["LiveRegionPlural"]">
            @foreach (var article in articleCards)
            {
                <article class="article-card" data-article-card data-category="@article.CategoryKey" data-search-text="@article.SearchText">
                    <div class="article-card__body">
                        <div class="article-card__meta">
                            @if (showCategoryFilters)
                            {
                                <span class="badge bg-light text-primary border border-primary-subtle">@article.CategoryLabel</span>
                            }
                            <div class="d-flex align-items-center gap-2 text-muted">
                                <i class="bi bi-calendar-event" aria-hidden="true"></i>
                                <time datetime="@article.PublishedAt:yyyy-MM-dd">@article.PublishedAtText</time>
                            </div>
                        </div>
                        <h2 class="article-card__title">
                            <a asp-page="./Details" asp-route-id="@article.Id" class="stretched-link text-decoration-none">@article.Title</a>
                        </h2>
                        @if (!string.IsNullOrWhiteSpace(article.Excerpt))
                        {
                            <p class="article-card__excerpt">@article.Excerpt</p>
                        }
                    </div>
                    <footer class="article-card__footer">
                        <a class="btn btn-primary" asp-page="./Details" asp-route-id="@article.Id" aria-label="@Localizer["PreviewAriaLabel", article.Title]">
                            @Localizer["PreviewLink"]
                        </a>
                    </footer>
                </article>
            }
        </div>
        <div class="articles-empty alert alert-info d-none" data-empty-state role="status">
            <i class="bi bi-info-circle" aria-hidden="true"></i>
            <span>@Localizer["EmptyState"]</span>
        </div>
    }
    else
    {
        <div class="alert alert-info" role="status">
            <i class="bi bi-info-circle" aria-hidden="true"></i>
            <span>@Localizer["EmptyState"]</span>
        </div>
    }
</section>

@if (totalPages > 1)
{
    <nav class="articles-pagination" aria-label="@Localizer["PaginationAriaLabel"]">
        <ul class="pagination justify-content-center flex-wrap mb-2">
            <li class="page-item @(currentPage <= 1 ? "disabled" : string.Empty)">
                <a class="page-link" asp-page="./Index" asp-route-PageNumber="@(Math.Max(currentPage - 1, 1))" asp-route-SearchString="@searchRouteValue">
                    @Localizer["Previous"]
                </a>
            </li>
            @for (var pageNumber = 1; pageNumber <= totalPages; pageNumber++)
            {
                <li class="page-item @(pageNumber == currentPage ? "active" : string.Empty)">
                    <a class="page-link" asp-page="./Index" asp-route-PageNumber="@pageNumber" asp-route-SearchString="@searchRouteValue">@pageNumber</a>
                </li>
            }
            <li class="page-item @(currentPage >= totalPages ? "disabled" : string.Empty)">
                <a class="page-link" asp-page="./Index" asp-route-PageNumber="@(Math.Min(currentPage + 1, totalPages))" asp-route-SearchString="@searchRouteValue">
                    @Localizer["Next"]
                </a>
            </li>
        </ul>
        <p class="text-center text-muted mb-0">@Localizer["PageStatus", currentPage, totalPages]</p>
    </nav>
}

<section class="articles-related" aria-labelledby="relatedCourses">
    <div class="card border-0 shadow-sm overflow-hidden">
        <div class="row g-0 align-items-center">
            <div class="col-lg-7 p-4 p-lg-5">
                <h2 id="relatedCourses" class="h3 fw-bold mb-3">@Localizer["CtaHeading"]</h2>
                <p class="mb-4 text-muted">@Localizer["CtaDescription"]</p>
                <div class="d-flex flex-wrap gap-3">
                    <a class="btn btn-outline-primary" href="/Courses/Index?search=ISO">@Localizer["CtaPrimaryButton"]</a>
                    <a class="btn btn-outline-secondary" href="/Contact">@Localizer["CtaSecondaryButton"]</a>
                </div>
            </div>
            <div class="col-lg-5 bg-primary-subtle p-4 text-center">
                <i class="bi bi-mortarboard fs-1 text-primary" aria-hidden="true"></i>
                <p class="mt-3 mb-0 fw-semibold text-primary">@Localizer["CtaHighlight"]</p>
            </div>
        </div>
    </div>
</section>

@section Head {
    <style>
        .articles-hero {
            padding: 2.5rem 0 1.5rem;
        }

        .articles-hero__content {
            max-width: 860px;
        }

        .articles-toolbar {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0 1.5rem;
            align-items: start;
        }

        .toolbar-group {
            background: var(--bs-body-bg);
            border: 1px solid var(--bs-border-color);
            border-radius: 0.75rem;
            padding: 1.25rem;
            box-shadow: 0 0.125rem 0.75rem rgba(11, 123, 179, 0.08);
        }

        .toolbar-group--search .input-group {
            align-items: stretch;
        }

        .toolbar-group--filters {
            min-height: 100%;
        }

        .toolbar-group--view {
            display: flex;
            gap: 0.75rem;
            justify-content: center;
            align-items: center;
        }

        .toolbar-group--view .btn {
            flex: 1 1 auto;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.25rem;
        }

        .toolbar-group--view .btn.active {
            background-color: var(--bs-primary);
            color: #fff;
        }

        .toolbar-filters {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem 1rem;
        }

        .article-list {
            display: grid;
            gap: 1.75rem;
        }

        .article-list--grid {
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        }

        .article-list--list {
            grid-template-columns: 1fr;
        }

        .article-card {
            background: var(--bs-body-bg);
            border-radius: 1rem;
            border: 1px solid var(--bs-border-color);
            box-shadow: 0 0.75rem 2rem rgba(11, 123, 179, 0.08);
            display: flex;
            flex-direction: column;
            position: relative;
            overflow: hidden;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .article-card:hover,
        .article-card:focus-within {
            transform: translateY(-4px);
            box-shadow: 0 1.25rem 2.25rem rgba(11, 123, 179, 0.14);
        }

        .article-card__body {
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .article-card__meta {
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 0.5rem 1rem;
        }

        .article-card__title {
            font-size: 1.45rem;
            line-height: 1.3;
            margin: 0;
        }

        .article-card__title a {
            color: inherit;
        }

        .article-card__excerpt {
            margin-bottom: 0;
            color: var(--bs-secondary-color);
        }

        .article-card__footer {
            margin-top: auto;
            padding: 1.25rem 1.5rem 1.5rem;
            background: var(--bs-light-bg-subtle, var(--bs-gray-100));
            border-top: 1px solid var(--bs-border-color);
        }

        .articles-empty {
            margin-top: 2rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .articles-related {
            margin-top: 3rem;
        }

        .articles-pagination {
            margin-top: 2rem;
        }

        .articles-pagination .page-link {
            min-width: 2.5rem;
            text-align: center;
        }

        @@media (max-width: 767.98px) {
            .article-card__title {
                font-size: 1.25rem;
            }

            .article-card__body {
                padding: 1.25rem;
            }

            .article-card__footer {
                padding: 1rem 1.25rem 1.25rem;
            }
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const listElement = document.querySelector('[data-articles-list]');
            const searchInput = document.querySelector('[data-articles-search]');
            const filterInputs = Array.from(document.querySelectorAll('[data-category-filter]'));
            const articleCards = Array.from(document.querySelectorAll('[data-article-card]'));
            const noResults = document.querySelector('[data-empty-state]');
            const liveRegion = document.getElementById('articlesLiveRegion');
            const viewButtons = Array.from(document.querySelectorAll('[data-view-toggle]'));

            const updateAnnouncement = (visible) => {
                if (!liveRegion || !listElement) {
                    return;
                }

                const singular = listElement.dataset.liveSingular ?? '';
                const pluralTemplate = listElement.dataset.livePlural ?? '';

                liveRegion.textContent = visible === 1
                    ? singular
                    : pluralTemplate.replace('{0}', visible.toString());
            };

            const applyFilters = () => {
                if (!listElement) {
                    return;
                }

                const query = (searchInput?.value ?? '').trim().toLowerCase();
                const activeCategories = filterInputs
                    .filter(input => input.checked)
                    .map(input => input.value.toLowerCase());

                let visibleCount = 0;
                articleCards.forEach(card => {
                    const category = (card.dataset.category ?? '').toLowerCase();
                    const searchable = card.dataset.searchText ?? '';
                    const matchesCategory = activeCategories.length === 0 || activeCategories.includes(category);
                    const matchesQuery = query.length === 0 || searchable.includes(query);
                    const isVisible = matchesCategory && matchesQuery;

                    card.classList.toggle('d-none', !isVisible);
                    card.setAttribute('aria-hidden', (!isVisible).toString());

                    if (isVisible) {
                        visibleCount += 1;
                    }
                });

                const hasResults = visibleCount > 0;
                if (noResults) {
                    noResults.classList.toggle('d-none', hasResults);
                }

                updateAnnouncement(visibleCount);
            };

            const switchView = (view) => {
                if (!listElement) {
                    return;
                }

                listElement.dataset.view = view;
                listElement.classList.toggle('article-list--grid', view === 'grid');
                listElement.classList.toggle('article-list--list', view === 'list');

                viewButtons.forEach(button => {
                    const isActive = button.dataset.viewToggle === view;
                    button.classList.toggle('active', isActive);
                    button.setAttribute('aria-pressed', isActive.toString());
                });
            };

            searchInput?.addEventListener('input', () => applyFilters());
            filterInputs.forEach(input => input.addEventListener('change', () => applyFilters()));
            viewButtons.forEach(button => button.addEventListener('click', () => switchView(button.dataset.viewToggle ?? 'grid')));

            if (listElement && articleCards.length > 0) {
                applyFilters();
            }
        });
    </script>
}
