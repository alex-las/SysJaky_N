@using System.Collections.Generic
@using System.Text.Json
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer

@functions {
    private sealed record FaqCategory(string Key, string Label);

    private sealed record FaqItem(string Category, string Question, string Answer, bool Expanded);
}

@{
    var serializerOptions = new JsonSerializerOptions
    {
        PropertyNameCaseInsensitive = true
    };

    var categoriesJson = Localizer["CategoriesJson"].Value;
    var faqCategories = JsonSerializer.Deserialize<List<FaqCategory>>(categoriesJson ?? "[]", serializerOptions) ?? new List<FaqCategory>();

    var faqItemsJson = Localizer["FaqItemsJson"].Value;
    var faqItems = JsonSerializer.Deserialize<List<FaqItem>>(faqItemsJson ?? "[]", serializerOptions) ?? new List<FaqItem>();

    var faqId = $"faq-{Guid.NewGuid():N}";
    var accordionId = $"{faqId}-accordion";
    var searchInputId = $"{faqId}-search";
    var searchIconId = $"{faqId}-search-icon";
}

<section class="faq" data-faq data-faq-id="@faqId">
    <header class="faq-header">
        <h2 class="faq-title">@Localizer["Title"]</h2>
        <p class="faq-subtitle">@Localizer["Subtitle"]</p>
        <div class="faq-search">
            <label class="form-label" for="@searchInputId">@Localizer["SearchLabel"]</label>
            <div class="input-group">
                <span class="input-group-text" id="@searchIconId"><i class="bi bi-search"></i></span>
                <input id="@searchInputId" class="form-control" type="search" placeholder="@Localizer["SearchPlaceholder"]" aria-describedby="@searchIconId" autocomplete="off" data-faq-search />
            </div>
        </div>
    </header>

    <div class="faq-categories" role="tablist" aria-label="@Localizer["CategoriesAriaLabel"]">
        @for (var i = 0; i < faqCategories.Count; i++)
        {
            var category = faqCategories[i];
            <button type="button" class="faq-category @(i == 0 ? "active" : null)" data-faq-category="@category.Key">@category.Label</button>
        }
    </div>

    <p class="faq-empty-message" aria-live="polite" hidden data-faq-empty>
        @Localizer["EmptyMessage"]
    </p>

    <div class="accordion faq-accordion" id="@accordionId">
        @for (var i = 0; i < faqItems.Count; i++)
        {
            var item = faqItems[i];
            var headingId = $"{faqId}-heading-{item.Category}-{i + 1}";
            var collapseId = $"{faqId}-collapse-{item.Category}-{i + 1}";
            var isExpanded = item.Expanded;

            <div class="accordion-item" data-faq-item data-faq-category="@item.Category">
                <h3 class="accordion-header" id="@headingId">
                    <button class="accordion-button @(isExpanded ? null : "collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="@(isExpanded ? "true" : "false")" aria-controls="@collapseId">
                        @item.Question
                    </button>
                </h3>
                <div id="@collapseId" class="accordion-collapse collapse @(isExpanded ? "show" : null)" aria-labelledby="@headingId" data-bs-parent="#@accordionId">
                    <div class="accordion-body">
                        @item.Answer
                    </div>
                </div>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        (function () {
            const faqInstances = document.querySelectorAll('[data-faq]');
            if (!faqInstances.length) {
                return;
            }

            faqInstances.forEach(faqRoot => {
                const searchInput = faqRoot.querySelector('[data-faq-search]');
                const categoryButtons = faqRoot.querySelectorAll('[data-faq-category]:not([data-faq-item])');
                const faqItems = Array.from(faqRoot.querySelectorAll('[data-faq-item]'));
                const emptyMessage = faqRoot.querySelector('[data-faq-empty]');

                if (!searchInput || !categoryButtons.length || !faqItems.length) {
                    return;
                }

                const normalize = (value) => (value || '')
                    .normalize('NFD')
                    .replace(/[\u0300-\u036f]/g, '')
                    .toLowerCase();

                let activeCategory = 'all';

                const applyFilters = () => {
                    const searchTerm = normalize(searchInput.value.trim());

                    faqItems.forEach(item => {
                        const matchesCategory = activeCategory === 'all' || item.dataset.faqCategory === activeCategory;
                        const textContent = normalize(item.textContent);
                        const matchesSearch = !searchTerm || textContent.includes(searchTerm);
                        item.style.display = matchesCategory && matchesSearch ? '' : 'none';
                    });

                    const visibleItems = faqItems.filter(item => item.style.display !== 'none');
                    const isEmpty = visibleItems.length === 0;

                    faqRoot.classList.toggle('faq--empty', isEmpty);

                    if (emptyMessage) {
                        emptyMessage.hidden = !isEmpty;
                    }
                };

                categoryButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        activeCategory = button.dataset.faqCategory || 'all';

                        categoryButtons.forEach(btn => btn.classList.toggle('active', btn === button));
                        applyFilters();
                    });
                });

                searchInput.addEventListener('input', () => {
                    window.clearTimeout(searchInput._faqDebounce);
                    searchInput._faqDebounce = window.setTimeout(applyFilters, 150);
                });

                applyFilters();
            });
        })();
    </script>
}
