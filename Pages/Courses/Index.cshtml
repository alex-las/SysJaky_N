@page
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model SysJaky_N.Pages.Courses.IndexModel
@{
    ViewData["Title"] = Localizer["Title"];
}

<h1 class="mb-3">@Localizer["Title"]</h1>

<ul class="nav nav-pills mb-3">
    <li class="nav-item"><a class="nav-link active" asp-page="/Courses/Index">@Localizer["TabList"]</a></li>
    <li class="nav-item"><a class="nav-link" asp-page="/Courses/Calendar">@Localizer["TabCalendar"]</a></li>
</ul>

<div class="result-header sticky-top z-2 d-flex flex-wrap align-items-center justify-content-between gap-2 mb-3 py-2 bg-body border-bottom">
    <div class="small text-muted" id="resultCount" data-count-template="@Localizer["ResultCount", "{0}"].Value">@Localizer["ResultCount", Model.TotalCount]</div>
    <div class="d-flex gap-2">
        <a class="btn btn-sm btn-outline-secondary" data-action="reset-all" href="@Url.Page("/Courses/Index")">@Localizer["ResetFilters"]</a>
        <a class="btn btn-sm btn-outline-primary d-lg-none" data-bs-toggle="offcanvas" href="#filters"><i class="bi bi-sliders"></i> @Localizer["FiltersButton"]</a>
    </div>
</div>

<div id="activeFilters" class="d-flex flex-wrap gap-2 mb-3"></div>

<div id="cmpBar" class="compare-bar d-none" data-count-format="@Localizer["CompareBarCountFormat"].Value" data-cta-text="@Localizer["CompareBarCta"].Value">
    <div class="container-xl d-flex justify-content-between align-items-center">
        <div class="small" id="cmpCount">@Localizer["CompareBarCountFormat", 0]</div>
        <a id="cmpGo" class="btn btn-primary btn-sm disabled" aria-disabled="true">@Localizer["CompareBarCta"]</a>
    </div>
</div>

<div id="courseError" class="alert alert-danger d-none" role="alert"></div>

@if (TempData["CartError"] is string cartError && !string.IsNullOrWhiteSpace(cartError))
{
    <div class="alert alert-danger" role="alert">@cartError</div>
}

@await Html.PartialAsync("/Pages/Courses/_Filters.cshtml", Model)

<div class="row g-3">
    <aside class="col-lg-3 d-none d-lg-block">
        <div class="feature-card p-3">
            @await Html.PartialAsync("/Pages/Courses/_FiltersForm.cshtml", Model)
        </div>
    </aside>
    <main class="col-lg-9">
        <div id="coursesGrid" class="courses-grid">
            @foreach (var c in Model.Courses)
            {
                @await Html.PartialAsync("/Pages/Shared/Components/_CourseCard.cshtml", c)
            }
        </div>

        <div id="noCourses" class="alert alert-info @(Model.Courses.Count == 0 ? string.Empty : "d-none")" role="status">@Localizer["NoCoursesFound"]</div>

        <nav class="mt-3 @(Model.TotalPages > 1 ? string.Empty : "d-none")" aria-label='@Localizer["PaginationLabel"]' id="coursePagination">
            <ul class="pagination mb-0">
                <li class="page-item @(Model.PageNumber <= 1 ? "disabled" : string.Empty)">
                    <button class="page-link" type="button" data-action="prev-page">@Localizer["Previous"]</button>
                </li>
                <li class="page-item disabled">
                    <span class="page-link" id="paginationStatus">@Model.PageNumber / @Model.TotalPages</span>
                </li>
                <li class="page-item @(Model.PageNumber >= Model.TotalPages ? "disabled" : string.Empty)">
                    <button class="page-link" type="button" data-action="next-page">@Localizer["Next"]</button>
                </li>
            </ul>
        </nav>
    </main>
</div>

@{
    var culture = System.Globalization.CultureInfo.CurrentCulture;
    var decimalSeparator = culture.NumberFormat.NumberDecimalSeparator;
    string cultureName = culture.Name;
    string currencyCode;
    try
    {
        var region = new System.Globalization.RegionInfo(culture.LCID);
        currencyCode = region.ISOCurrencySymbol;
    }
    catch
    {
        currencyCode = "CZK";
    }

    var config = new
    {
        price = new { min = Model.PriceMinimum, max = Model.PriceMaximum },
        initial = new
        {
            pageNumber = Model.PageNumber,
            totalPages = Model.TotalPages,
            totalCount = Model.TotalCount,
            search = Model.SearchString ?? string.Empty,
            norms = Model.SelectedTagIds,
            cities = Model.SelectedCityTagIds,
            levels = Model.SelectedLevels.Select(l => l.ToString()),
            types = Model.SelectedTypes.Select(t => t.ToString()),
            minPrice = Model.MinPrice ?? Model.PriceMinimum,
            maxPrice = Model.MaxPrice ?? Model.PriceMaximum,
            hasFilters = Model.HasActiveFilters,
            courses = Model.Courses.Select(c => new
            {
                id = c.Id,
                title = c.Title,
                description = c.Description,
                level = c.Level.ToString(),
                mode = c.Mode.ToString(),
                type = c.Type.ToString(),
                duration = c.Duration,
                durationDisplay = string.Format(culture, "{0} min", c.Duration),
                dateDisplay = c.Date.ToString("d", culture),
                price = c.Price,
                priceDisplay = c.Price.ToString("C", culture),
                coverImageUrl = c.CoverImageUrl,
                popoverHtml = c.PopoverHtml,
                detailsUrl = Url.Page("/Courses/Details", new { id = c.Id }) ?? $"/Courses/Details/{c.Id}",
                addToCartUrl = Url.Page("/Courses/Index", pageHandler: "AddToCart") ?? "/Courses/Index?handler=AddToCart"
            })
        },
        filters = new
        {
            norms = Model.NormOptions.Select(o => new { id = o.Id, name = o.Name }),
            cities = Model.CityOptions.Select(o => new { id = o.Id, name = o.Name }),
            levels = Model.LevelOptions.Select(o => new { value = o.Value, label = o.Label }),
            types = Model.TypeOptions.Select(o => new { value = o.Value, label = o.Label })
        },
        resources = new
        {
            searchPlaceholder = Localizer["SearchPlaceholder"].Value ?? string.Empty,
            searchLabel = Localizer["SearchLabel"].Value ?? "Hledat",
            normsLabel = Localizer["NormsLabel"].Value ?? "Normy",
            citiesLabel = Localizer["CitiesLabel"].Value ?? "Města",
            levelsLabel = Localizer["LevelsLabel"].Value ?? "Úrovně",
            typesLabel = Localizer["TypesLabel"].Value ?? "Forma",
            priceRangeLabel = Localizer["PriceRangeLabel"].Value ?? "Rozsah ceny",
            priceLabel = Localizer["PriceLabel"].Value ?? "Cena",
            saveFilters = Localizer["SaveFilters"].Value ?? "Uložit filtry",
            savedMessage = Localizer["FiltersSaved"].Value ?? "Filtry byly uloženy.",
            clearFilters = Localizer["ResetFilters"].Value ?? "Resetovat",
            compareLabel = Localizer["Compare"].Value ?? "Porovnat",
            compareLimit = Localizer["CompareLimit"].Value ?? "Můžete porovnat maximálně 3 kurzy.",
            detailsLabel = Localizer["Details"].Value ?? "Detail",
            enrollLabel = Localizer["Enroll"].Value ?? "Přihlásit",
            resultCountTemplate = Localizer["ResultCount", "{0}"].Value ?? "{0}",
            noResults = Localizer["NoCoursesFound"].Value ?? "Žádné kurzy neodpovídají výběru.",
            fetchError = Localizer["FetchError"].Value ?? "Nepodařilo se načíst kurzy.",
            pageStatusTemplate = Localizer["PageStatus", "{0}", "{1}"].Value ?? "{0}/{1}",
            removeLabel = Localizer["RemoveFilter"].Value ?? "Odebrat filtr",
            currencySymbol = culture.NumberFormat.CurrencySymbol
        },
        culture = new
        {
            name = cultureName,
            decimalSeparator,
            currencySymbol = culture.NumberFormat.CurrencySymbol,
            currencyCode
        }
    };

    var jsonOptions = new System.Text.Json.JsonSerializerOptions
    {
        PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase,
        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
    };

    var configJson = System.Text.Json.JsonSerializer.Serialize(config, jsonOptions);
}
<script type="application/json" id="courseFiltersData">@Html.Raw(configJson)</script>

@section Scripts {
    <script type="module" src="~/js/courseFilters.js"></script>
}
